(this.webpackJsonp=this.webpackJsonp||[]).push([["payone-payment"],{DMdC:function(e,t,n){},E7l4:function(e,t){e.exports='{% block payone_payment_details %}\n    <div class="payone-order-items">\n        <sw-data-grid\n                :dataSource="orderItems"\n                :columns="orderItemColumns"\n                :showActions="false"\n                :showSelection="true"\n                v-on:select-item="onSelectItem">\n\n            <template slot="column-reference" slot-scope="{ item, isInlineEdit}">\n                <div v-tooltip="{ message: item.reference, disabled: item.reference.length <= 15 }">\n                    {{ item.reference | truncate(15, true, \'...\') }}\n                </div>\n            </template>\n\n            <template slot="column-product" slot-scope="{ item, isInlineEdit}">\n                {{ item.product }}\n            </template>\n\n            <template slot="column-price" slot-scope="{ item, isInlineEdit}">\n                {{ item.price }}\n            </template>\n\n            <template slot="column-quantity" slot-scope="{ item, isInlineEdit }">\n                <sw-field\n                        :value="item.quantity"\n                        type="number"\n                        :min="0"\n                        :disabled="item.disabled"\n                        :max="item.quantity"\n                        slot="inline-edit"\n                        size="small"\n                        placeholder=0\n                        v-on:change="onChangeQuantity($event, item.id)">\n                </sw-field>\n            </template>\n        </sw-data-grid>\n    </div>\n{% endblock %}\n'},KBQv:function(e,t){const{Application:n}=Shopware,a=Shopware.Classes.ApiService;class s extends a{constructor(e,t,n="payone"){super(e,t,n)}capturePayment(e){const t=`_action/${this.getApiBasePath()}/capture-payment`;return this.httpClient.post(t,e,{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}refundPayment(e){const t=`_action/${this.getApiBasePath()}/refund-payment`;return this.httpClient.post(t,e,{headers:this.getBasicHeaders()}).then(e=>a.handleResponse(e))}}n.addServiceProvider("PayonePaymentService",e=>{const t=n.getContainer("init");return new s(t.httpClient,e.loginService)})},Lvox:function(e,t,n){var a=n("DMdC");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("SZ7m").default)("3806acf0",a,!0,{})},McCE:function(e,t,n){var a=n("McMq");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("SZ7m").default)("f06f327e",a,!0,{})},McMq:function(e,t,n){},NXBA:function(e,t,n){},OPxs:function(e,t,n){"use strict";n.r(t);var a=n("asGc"),s=n.n(a);const{Component:i,Mixin:o}=Shopware;i.register("payone-capture-button",{template:s.a,mixins:[o.getByName("notification")],inject:["PayonePaymentService"],props:{order:{type:Object,required:!0},transaction:{type:Object,required:!0}},data:()=>({isLoading:!1,hasError:!1,showCaptureModal:!1,isCaptureSuccessful:!1,selection:[],captureAmount:0,description:""}),computed:{remainingAmount(){return this.transaction.amount.totalPrice-this.capturedAmount},capturedAmount(){return void 0===this.transaction.customFields.payone_captured_amount?0:this.transaction.customFields.payone_captured_amount},buttonEnabled(){return!!this.transaction.customFields&&this.transaction.customFields.payone_allow_capture},maxCaptureAmount(){return this.remainingAmount},minCaptureAmount(){return 1/10**this.order.currency.decimalPrecision}},methods:{calculateCaptureAmount(){let e=0;this.selection.forEach(t=>{t.selected&&(e+=t.unit_price*t.quantity)}),(0===e||e>this.remainingAmount)&&(e=this.remainingAmount),this.captureAmount=e},openCaptureModal(){this.showCaptureModal=!0,this.isCaptureSuccessful=!1,this.captureAmount=this.remainingAmount/10**this.order.currency.decimalPrecision,this.description="",this.selection=[]},closeCaptureModal(){this.showCaptureModal=!1},onCaptureFinished(){this.isCaptureSuccessful=!1},captureOrder(){const e={orderTransactionId:this.transaction.id,payone_order_id:this.transaction.customFields.payone_transaction_id,salesChannel:this.order.salesChannel,captureAmount:this.captureAmount,description:this.description,orderLines:[],decimalPrecision:this.order.currency.decimalPrecision,complete:this.captureAmount===this.maxCaptureAmount};this.isLoading=!0,this.selection.forEach(t=>{this.order.lineItems.forEach(n=>{if(n.id===t.id&&t.selected&&0<t.quantity){const a={...n},s=a.tax_rate/10**e.decimalPrecision;a.quantity=t.quantity,a.total_amount=a.unit_price*a.quantity,a.total_tax_amount=Math.round(a.total_amount/(100+s)*s),e.orderLines.push(a)}})}),this.PayonePaymentService.capturePayment(e).then(()=>{this.createNotificationSuccess({title:this.$tc("payone-payment-order-management.messages.captureSuccessTitle"),message:this.$tc("payone-payment-order-management.messages.captureSuccessMessage")}),this.isCaptureSuccessful=!0}).catch(()=>{this.createNotificationError({title:this.$tc("payone-payment-order-management.messages.captureErrorTitle"),message:this.$tc("payone-payment-order-management.messages.captureErrorMessage")}),this.isCaptureSuccessful=!1}).finally(()=>{this.$emit("reload"),this.isLoading=!1,this.showCaptureModal=!1})},onSelectItem(e,t){0===this.selection.length&&this._populateSelectionProperty(),this.selection.forEach(n=>{n.id===e&&(n.selected=t)}),this.calculateCaptureAmount()},onChangeQuantity(e,t){0===this.selection.length&&this._populateSelectionProperty(),this.selection.forEach(n=>{n.reference===e&&(n.quantity=t)}),this.calculateCaptureAmount()},onChangeDescription(e){e.length>=255&&(e=e.substr(0,255)),this.description=e},_populateSelectionProperty(){this.order.lineItems.forEach(e=>{let t=e.quantity;e.customFields&&e.customFields.captured_quantity&&e.customFields.captured_quantity>0&&(t-=e.customFields.captured_quantity),this.selection.push({id:e.id,reference:e.referencedId,quantity:t,unit_price:e.unitPrice,selected:!1})})}}});var r=n("fBZk"),c=n.n(r);const{Component:l,Mixin:d}=Shopware;l.register("payone-refund-button",{template:c.a,mixins:[d.getByName("notification")],inject:["PayonePaymentService"],props:{order:{type:Object,required:!0},transaction:{type:Object,required:!0}},data:()=>({isLoading:!1,hasError:!1,showRefundModal:!1,isRefundSuccessful:!1,selection:[],refundAmount:0,description:""}),computed:{remainingAmount(){return this.order.captured_amount-this.order.refunded_amount},buttonEnabled(){return!!this.transaction.customFields&&this.transaction.customFields.payone_allow_refund},maxRefundAmount(){return this.remainingAmount/10**this.order.decimal_precision},minRefundValue(){return 1/10**this.order.decimal_precision}},methods:{calculateRefundAmount(){let e=0;this.selection.forEach(t=>{t.selected&&(e+=t.unit_price*t.quantity)}),(0===e||e>this.remainingAmount)&&(e=this.remainingAmount),e/=10**this.order.decimal_precision,this.refundAmount=e},openRefundModal(){this.showRefundModal=!0,this.isRefundSuccessful=!1,this.refundAmount=this.remainingAmount/10**this.order.decimal_precision,this.description="",this.selection=[]},closeRefundModal(){this.showRefundModal=!1},onRefundFinished(){this.isRefundSuccessful=!1},refundOrder(){this.isLoading=!0;const e=[];this.selection.forEach(t=>{this.order.order_lines.forEach(n=>{if(n.reference===t.reference&&t.selected&&t.quantity>0){const a={...n};a.quantity=t.quantity,a.total_amount=a.unit_price*a.quantity;const s=a.tax_rate/10**this.order.decimal_precision;a.total_tax_amount=Math.round(a.total_amount/(100+s)*s),e.push(a)}})});const t={orderTransactionId:this.order.orderTransactionId,payone_order_id:this.order.order_id,salesChannel:this.order.salesChannel,refundAmount:this.refundAmount,description:this.description,orderLines:JSON.stringify(e),decimalPrecision:this.order.decimal_precision,complete:this.refundAmount===this.maxRefundAmount};this.payonePaymentOrderService.refundOrder(t).then(()=>{this.createNotificationSuccess({title:this.$tc("payone-payment-order-management.messages.refundSuccessTitle"),message:this.$tc("payone-payment-order-management.messages.refundSuccessMessage")}),this.isRefundSuccessful=!0}).catch(()=>{this.createNotificationError({title:this.$tc("payone-payment-order-management.messages.refundErrorTitle"),message:this.$tc("payone-payment-order-management.messages.refundErrorMessage")}),this.isRefundSuccessful=!1}).finally(()=>{this.$emit("reload"),this.isLoading=!1,this.showRefundModal=!1})},onSelectItem(e,t){0===this.selection.length&&this._populateSelectionProperty(),this.selection.forEach(n=>{n.reference===e&&(n.selected=t)}),this.calculateRefundAmount()},onChangeQuantity(e,t){0===this.selection.length&&this._populateSelectionProperty(),this.selection.forEach(n=>{n.reference===e&&(n.quantity=t)}),this.calculateRefundAmount()},onChangeDescription(e){e.length>=255&&(e=e.substr(0,255)),this.description=e},_populateSelectionProperty(){this.order.order_lines.forEach(e=>{let t=e.quantity;e.captured_quantity>0&&(t=e.captured_quantity),this.selection.push({quantity:t-e.refunded_quantity,reference:e.reference,unit_price:e.unit_price,selected:!1})})}}});var u=n("E7l4"),p=n.n(u);const{Component:m}=Shopware;m.register("payone-order-items",{template:p.a,props:{order:{type:Object,required:!0},mode:{type:String,required:!1}},computed:{orderItems(){const e=[];return this.order.lineItems.forEach(t=>{const n=this.$options.filters.currency(t.totalPrice,this.order.currency.shortName,this.order.decimal_precision);let a=!1,s=t.quantity;t.customFields&&("refund"===this.mode&&0<t.customFields.payone_captured_quantity?s=t.customFields.payone_captured_quantity-t.customFields.payone_refunded_quantity:"capture"===this.mode&&0<t.customFields.payone_captured_quantity&&(s-=t.customFields.payone_captured_quantity)),1>s&&(a=!0),e.push({id:t.id,reference:t.referencedId,product:t.label,quantity:s,disabled:a,price:n,orderItem:t})}),e},orderItemColumns(){return[{property:"reference",label:this.$tc("payone-payment.modal.columns.reference"),rawData:!0},{property:"product",label:this.$tc("payone-payment.modal.columns.product"),rawData:!0},{property:"quantity",label:this.$tc("payone-payment.modal.columns.quantity"),rawData:!0},{property:"price",label:this.$tc("payone-payment.modal.columns.price"),rawData:!0}]}},methods:{onSelectItem(e,t,n){this.$emit("select-item",t.id,n)},onChangeQuantity(e,t){this.$emit("change-quantity",t,e)}}});var y=n("mLM4"),h=n.n(y);n("McCE");const{Component:f,Mixin:g}=Shopware;f.register("payone-settings",{template:h.a,mixins:[g.getByName("notification"),g.getByName("sw-inline-snippet")],inject:["PayonePaymentSettingsService"],data:()=>({isLoading:!1,isTesting:!1,isSaveSuccessful:!1,isTestSuccessful:!1,config:{},merchantIdFilled:!1,accountIdFilled:!1,portalIdFilled:!1,portalKeyFilled:!1,showValidationErrors:!1,isSupportModalOpen:!1,stateMachineTransitionActions:[]}),created(){this.createdComponent()},computed:{credentialsMissing:function(){return!(this.merchantIdFilled&&this.accountIdFilled&&this.portalIdFilled&&this.portalKeyFilled)}},metaInfo(){return{title:this.$createTitle()}},methods:{createdComponent(){var e=this;this.PayonePaymentSettingsService.getStateMachineTransitionActions().then(t=>{t.data.forEach(t=>{e.stateMachineTransitionActions.push({label:e.$tc("payone-payment.transitionActionNames."+t.label),value:t.value})})})},paymentMethodPrefixes:()=>["creditCard","debit","paypal","paypalExpress","payolutionInvoicing","payolutionInstallment","payolutionDebit","sofort"],saveFinish(){this.isSaveSuccessful=!1},testFinish(){this.isTestSuccessful=!1},onConfigChange(e){this.config=e,this.checkCredentialsFilled(),this.showValidationErrors=!1},checkCredentialsFilled(){this.merchantIdFilled=!!this.getConfigValue("merchantId"),this.accountIdFilled=!!this.getConfigValue("accountId"),this.portalIdFilled=!!this.getConfigValue("portalId"),this.portalKeyFilled=!!this.getConfigValue("portalKey")},getConfigValue(e){const t=this.$refs.systemConfig.actualConfigData.null;return null===this.$refs.systemConfig.currentSalesChannelId?this.config[`PayonePayment.settings.${e}`]:this.config[`PayonePayment.settings.${e}`]||t[`PayonePayment.settings.${e}`]},getPaymentConfigValue(e,t){let n=e.charAt(0).toUpperCase()+e.slice(1);return this.getConfigValue(t+n)||this.getConfigValue(e)},onSave(){this.credentialsMissing?this.showValidationErrors=!0:(this.isSaveSuccessful=!1,this.isLoading=!0,this.$refs.systemConfig.saveAll().then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0}).catch(()=>{this.isLoading=!1}))},onTest(){this.isTesting=!0,this.isTestSuccessful=!1;let e={};this.paymentMethodPrefixes().forEach(t=>{e[t]={merchantId:this.getPaymentConfigValue("merchantId",t),accountId:this.getPaymentConfigValue("accountId",t),portalId:this.getPaymentConfigValue("portalId",t),portalKey:this.getPaymentConfigValue("portalKey",t)}}),this.PayonePaymentSettingsService.validateApiCredentials(e).then(e=>{const t=e.credentialsValid,n=e.errors;if(t)this.createNotificationSuccess({title:this.$tc("payone-payment.settingsForm.titleSuccess"),message:this.$tc("payone-payment.settingsForm.messageTestSuccess")}),this.isTestSuccessful=!0;else for(let e in n)n.hasOwnProperty(e)&&this.createNotificationError({title:this.$tc("payone-payment.settingsForm.titleError"),message:this.$tc("payone-payment.settingsForm.messageTestError."+e)});this.isTesting=!1}).catch(e=>{this.createNotificationError({title:this.$tc("payone-payment.settingsForm.titleError"),message:this.$tc("payone-payment.settingsForm.messageTestError.general")}),this.isTesting=!1})},getBind(e,t){return t!==this.config&&this.onConfigChange(t),this.showValidationErrors&&("PayonePayment.settings.merchantId"!==e.name||this.merchantIdFilled||(e.config.error={code:1,detail:this.$tc("payone-payment.messageNotBlank")}),"PayonePayment.settings.accountId"!==e.name||this.accountIdFilled||(e.config.error={code:1,detail:this.$tc("payone-payment.messageNotBlank")}),"PayonePayment.settings.portalId"!==e.name||this.portalIdFilled||(e.config.error={code:1,detail:this.$tc("payone-payment.messageNotBlank")}),"PayonePayment.settings.portalKey"!==e.name||this.portalKeyFilled||(e.config.error={code:1,detail:this.$tc("payone-payment.messageNotBlank")})),e}}});var b=n("jAFz"),w=n.n(b);n("Lvox");const{Component:_,Mixin:P}=Shopware;_.override("sw-order-detail-base",{template:w.a,inject:["PayonePaymentService"],mixins:[P.getByName("notification")],data:()=>({disableButtons:!1}),methods:{isPayonePayment:e=>!!e.customFields&&e.customFields.payone_transaction_id,hasPayonePayment(e){let t=this,n=!1;return!!e.transactions&&(e.transactions.map((function(e){t.isPayonePayment(e)&&(n=!0)})),n)},captureOrder(e){let t=this;this.isPayonePayment(e)&&(t.disableButtons=!0,this.PayonePaymentService.capturePayment(e.id).then(()=>{this.createNotificationSuccess({title:this.$tc("payone-payment.capture.successTitle"),message:this.$tc("payone-payment.capture.successMessage")}),t.reloadEntityData(),t.disableButtons=!1}).catch(e=>{this.createNotificationError({title:this.$tc("payone-payment.capture.errorTitle"),message:e.response.data.message}),t.disableButtons=!1}))}}});var v=n("Yjca"),S=n.n(v);n("d11z");const{Component:C}=Shopware;C.override("sw-settings-index",{template:S.a});var A=n("m1C4"),k=n("eQpg");const{Module:E}=Shopware;E.register("payone-payment",{type:"plugin",name:"PayonePayment",title:"payone-payment.general.mainMenuItemGeneral",description:"payone-payment.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",icon:"default-action-settings",snippets:{"de-DE":A,"en-GB":k},routeMiddleware(e,t){e(t)},routes:{index:{component:"payone-settings",path:"index",meta:{parentPath:"sw.settings.index"}}}});n("KBQv"),n("Q7qL")},Q7qL:function(e,t){const{Application:n}=Shopware,a=Shopware.Classes.ApiService;class s extends a{constructor(e,t,n="payone_payment"){super(e,t,n)}validateApiCredentials(e){const t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/validate-api-credentials`,{credentials:e},{headers:t}).then(e=>a.handleResponse(e))}getStateMachineTransitionActions(){const e=this.getBasicHeaders();return this.httpClient.get(`_action/${this.getApiBasePath()}/get-state-machine-transition-actions`,{headers:e}).then(e=>a.handleResponse(e))}}n.addServiceProvider("PayonePaymentSettingsService",e=>{const t=n.getContainer("init");return new s(t.httpClient,e.loginService)})},Yjca:function(e,t){e.exports='{% block sw_settings_content_card_slot_plugins %}\n    {% parent %}\n\n    <sw-settings-item :label="$tc(\'payone-payment.general.mainMenuItemGeneral\')"\n                      :to="{ name: \'payone.payment.index\' }"\n                      :backgroundEnabled="false">\n        <template #icon>\n            \x3c!-- TODO: Image only works in production mode --\x3e\n            <img class="sw-settings-index__payone-icon" :src="\'payonepayment/plugin.png\' | asset">\n        </template>\n    </sw-settings-item>\n{% endblock %}\n'},asGc:function(e,t){e.exports='{% block payone_payment_payment_details %}\n<div class="payone-capture-button">\n    <sw-container v-tooltip="{message: $tc(\'payone-payment.capture.tooltips.impossible\'), disabled: buttonEnabled}" :key="buttonEnabled">\n        <sw-button :disabled="!buttonEnabled" @click="openCaptureModal">\n            {{ $tc(\'payone-payment.capture.buttonTitle\') }}\n        </sw-button>\n    </sw-container>\n\n    <sw-modal v-if="true" @modal-close="closeCaptureModal" :title="$tc(`payone-payment.modal.capture.title`)" class="payone-payment-detail--capture-modal">\n{#    <sw-modal v-if="openCaptureModal" @modal-close="closeCaptureModal" :title="$tc(`payone-payment.modal.title`)" class="payone-payment-detail--capture-modal">#}\n        <payone-order-items\n                :order="order"\n                mode="capture"\n                v-on:select-item="onSelectItem"\n                v-on:change-quantity="onChangeQuantity">\n        </payone-order-items>\n\n        <div class="payone-payment-detail--capture-modal--content">\n            <sw-container columns="1fr 1fr" gap="0 32px">\n                <sw-text-field :disabled="true" :label="$tc(\'payone-payment.modal.orderAmount\')" :value="transaction.amount.totalPrice | currency(order.currency.shortName)"></sw-text-field>\n                <sw-text-field :disabled="true" :label="$tc(\'payone-payment.modal.capture.captured\')" :value="capturedAmount | currency(order.currency.shortName)"></sw-text-field>\n                <sw-text-field :disabled="true" :label="$tc(\'payone-payment.modal.remainingAmount\')" :value="remainingAmount | currency(order.currency.shortName)"></sw-text-field>\n                <sw-number-field required="required" numberType="float" :digits="order.decimal_precision" :label="$tc(\'payone-payment.modal.capture.amount\')" v-model="captureAmount" :min="minCaptureAmount" :max="maxCaptureAmount"></sw-number-field>\n            </sw-container>\n\n            <sw-textarea-field :helpText="$tc(\'payone-payment.modal.descriptionHelpText\')" v-on:input="onChangeDescription" :label="$tc(\'payone-payment.modal.labelComment\')" v-model="description"></sw-textarea-field>\n        </div>\n\n        <template slot="modal-footer">\n            <sw-button :disabled="isLoading" @click="closeCaptureModal">\n                {{ $tc(\'payone-payment.modal.close\') }}\n            </sw-button>\n\n            <sw-button-process :isLoading="isLoading" :processSuccess="isCaptureSuccessful" @process-finish="onCaptureFinished()" :disabled="isLoading" variant="primary" @click="captureOrder">\n                {{ $tc(\'payone-payment.modal.capture.submit\') }}\n            </sw-button-process>\n        </template>\n    </sw-modal>\n</div>\n{% endblock %}\n'},d11z:function(e,t,n){var a=n("NXBA");"string"==typeof a&&(a=[[e.i,a,""]]),a.locals&&(e.exports=a.locals);(0,n("SZ7m").default)("e7715378",a,!0,{})},eQpg:function(e){e.exports=JSON.parse('{"payone-payment":{"title":"PAYONE","general":{"mainMenuItemGeneral":"PAYONE","descriptionTextModule":"Settings for PAYONE"},"capture":{"buttonTitle":"Capture","successTitle":"PAYONE","successMessage":"Capture processed successfully.","errorTitle":"PAYONE","tooltips":{"impossible":"Capture impossible"}},"refund":{"buttonTitle":"Refund","successTitle":"PAYONE","successMessage":"Refund processed successfully.","errorTitle":"PAYONE","tooltips":{"impossible":"Refund impossible"}},"modal":{"capture":{"title":"Capture","submit":"Capture","amount":"Capture amount","captured":"Captured amount"},"refund":{"title":"Refund","submit":"Refund","amount":"Refund amount","refunded":"Refunded amount"},"orderAmount":"Order amount","remainingAmount":"Remaining amount","descriptionHelpText":"Description help text","close":"Close","labelComment":"Label comment","columns":{"reference":"Reference","product":"Product","quantity":"Quantity","price":"Price"}},"settingsForm":{"save":"Save","test":"Test API Credentials","titleSuccess":"Success","titleError":"Error","messageTestSuccess":"The API credentials were verified successfully.","messageTestError":{"general":"The API credentials could not be verified successfully.","creditCard":"The API credentials for Credit Card are not valid.","debit":"The API credentials for Debit are not valid.","paypalExpress":"The API credentials for PayPal Express are not valid.","paypal":"The API credentials for PayPal are not valid.","payolutionInstallment":"The API credentials for Paysafe Pay Later Installment are not valid.","payolutionInvoicing":"The API credentials for Paysafe Pay Later Invoicing are not valid.","payolutionDebit":"The API credentials for Paysafe Pay Later Debit are not valid.","sofort":"The API credentials for SOFORT are not valid."}},"supportModal":{"menuButton":"Support","title":"How Can We Help You?","documentation":{"description":"Read our online manual","button":"Online Manual"},"support":{"description":"Contact our technical support","button":"Tech Support"},"repository":{"description":"Report errors on GitHub","button":"GitHub"}},"transitionActionNames":{"cancel":"Cancel","complete":"Complete","pay":"Pay","pay_partially":"Pay partially","process":"Process","refund":"Refund","refund_partially":"Refund partially","remind":"Remind","reopen":"Reopen","retour":"Retour","retour_partially":"Retour partially","ship":"Ship","ship_partially":"Ship partially"},"messageNotBlank":"This field must not be empty.","txid":"TXID","sequenceNumber":{"label":"Sequence Number","empty":"none"},"transactionState":"State"}}')},fBZk:function(e,t){e.exports='{% block payone_payment_payment_details %}\n<div class="payone-refund-button">\n    <sw-container v-tooltip="{message: $tc(\'payone-payment.refund.tooltips.impossible\'), disabled: buttonEnabled}" :key="buttonEnabled">\n        <sw-button :disabled="!buttonEnabled" @click="openRefundModal">\n            {{ $tc(\'payone-payment.refund.buttonTitle\') }}\n        </sw-button>\n    </sw-container>\n\n    <sw-modal v-if="showRefundModal" @modal-close="closeRefundModal" :title="$tc(`payone-payment.modal.refund.title`)" class="payone-payment-detail--refund-modal">\n        <payone-order-items\n                :order="order"\n                mode="refund"\n                v-on:select-item="onSelectItem"\n                v-on:change-quantity="onChangeQuantity">\n        </payone-order-items>\n\n        <div class="payone-payment-detail--refund-modal--content">\n            <sw-container columns="1fr 1fr" gap="0 32px">\n{#                <sw-text-field :disabled="true" :label="$tc(\'payone-payment.modal.orderAmount\')" :value="order.order_amount | currency(order.currency.shortName)"></sw-text-field>#}\n{#                <sw-text-field :disabled="true" :label="$tc(\'payone-payment.modal.refund.refunded\')" :value="order.refunded_amount | currency(order.currency.shortName)"></sw-text-field>#}\n{#                <sw-text-field :disabled="true" :label="$tc(\'payone-payment.modal.remainingAmount\')" :value="remainingAmount | currency(order.currency.shortName)"></sw-text-field>#}\n                <sw-number-field required="required" numberType="float" :digits="order.decimal_precision" :label="$tc(\'payone-payment.modal.refund.amount\')" v-model="refundAmount" :min="minRefundValue" :max="maxRefundAmount"></sw-number-field>\n            </sw-container>\n\n            <sw-textarea-field :helpText="$tc(\'payone-payment.modal.descriptionHelpText\')" v-on:input="onChangeDescription" :label="$tc(\'payone-payment.modal.labelComment\')" v-model="description"></sw-textarea-field>\n        </div>\n\n        <template slot="modal-footer">\n            <sw-button :disabled="isLoading" @click="closeRefundModal">\n                {{ $tc(\'payone-payment.modal.close\') }}\n            </sw-button>\n\n            <sw-button-process :isLoading="isLoading" :processSuccess="isRefundSuccessful" @process-finish="onRefundFinished()" :disabled="isLoading" variant="primary" @click="refundOrder">\n                {{ $tc(\'payone-payment.modal.refund.submit\') }}\n            </sw-button-process>\n        </template>\n    </sw-modal>\n</div>\n{% endblock %}\n'},jAFz:function(e,t){e.exports='{% block sw_order_detail_delivery_metadata %}\n    {% parent %}\n\n    <template v-if="!isLoading" :isLoading="isLoading">\n        <template v-if="hasPayonePayment(order)">\n            <sw-card class="sw-order-payone-card" :title="$tc(\'payone-payment.title\')">\n                <template v-for="transaction in order.transactions">\n                    <template v-if="isPayonePayment(transaction)">\n                        <sw-container columns="1fr 1fr">\n                            <sw-container>\n                                <sw-description-list>\n                                    <dt>{{ $tc(\'payone-payment.txid\') }}</dt>\n                                    <dd class="sw-order-base__label-sales-channel">{{ transaction.customFields.payone_transaction_id }}</dd>\n\n                                    <dt>{{ $tc(\'payone-payment.sequenceNumber.label\') }}</dt>\n                                    <dd class="sw-order-base__label-sales-channel">\n                                        <span v-if="transaction.customFields.payone_sequence_number == -1">\n                                            {{ $tc(\'payone-payment.sequenceNumber.empty\') }}\n                                        </span>\n                                        <span v-else>\n                                            {{ transaction.customFields.payone_sequence_number }}\n                                        </span>\n                                    </dd>\n\n                                    <dt>{{ $tc(\'payone-payment.transactionState\') }}</dt>\n                                    <dd class="sw-order-base__label-sales-channel">{{ transaction.customFields.payone_transaction_state }}</dd>\n                                </sw-description-list>\n                            </sw-container>\n\n                            <sw-container gap="30px">\n                                <payone-capture-button :order="order" :transaction="transaction"></payone-capture-button>\n                                <payone-refund-button :order="order" :transaction="transaction"></payone-refund-button>\n                            </sw-container>\n                        </sw-container>\n                    </template>\n                </template>\n            </sw-card>\n        </template>\n    </template>\n{% endblock %}\n'},m1C4:function(e){e.exports=JSON.parse('{"payone-payment":{"title":"PAYONE","general":{"mainMenuItemGeneral":"PAYONE","descriptionTextModule":"Einstellungen für PAYONE"},"capture":{"buttonTitle":"Capture","successTitle":"PAYONE","successMessage":"Capture erfolgreich durchgeführt.","errorTitle":"PAYONE","tooltips":{"impossible":"Einzug unmöglich"}},"refund":{"buttonTitle":"Refund","successTitle":"PAYONE","successMessage":"Refund erfolgreich durchgeführt.","errorTitle":"PAYONE","tooltips":{"impossible":"Erstattung unmöglich"}},"modal":{"capture":{"title":"Einzug","submit":"Einziehen","amount":"Einzugswert","captured":"Eingezogener Wert"},"refund":{"title":"Erstattung","submit":"Erstatten","amount":"Erstattungswert","refunded":"Erstatteter Wert"},"close":"Schließen","orderAmount":"Bestellungswert","remainingAmount":"Ausstehender Wert","labelComment":"Label comment","descriptionHelpText":"Description help text","columns":{"reference":"Referenz","product":"Produkt","quantity":"Anzahl","price":"Preis"}},"settingsForm":{"save":"Speichern","test":"API-Zugangsdaten testen","titleSuccess":"Erfolg","titleError":"Fehler","messageTestSuccess":"Die API-Zugangsdaten wurden erfolgreich validiert.","messageTestError":{"general":"Die API-Zugangsdaten konnten nicht validiert werden.","creditCard":"Die API-Zugangsdaten für Kreditkarte sind nicht korrekt.","debit":"Die API-Zugangsdaten für Lastschrift sind nicht korrekt.","paypalExpress":"Die API-Zugangsdaten für PayPal Express sind nicht korrekt.","paypal":"Die API-Zugangsdaten für PayPal sind nicht korrekt.","payolutionInstallment":"Die API-Zugangsdaten für Paysafe Pay Later Ratenzahlung sind nicht korrekt.","payolutionInvoicing":"Die API-Zugangsdaten für Paysafe Pay Later Rechnungskauf sind nicht korrekt.","payolutionDebit":"Die API-Zugangsdaten für Paysafe Pay Later Lastschrift sind nicht korrekt.","sofort":"Die API-Zugangsdaten für SOFORT sind nicht korrekt."}},"supportModal":{"menuButton":"Support","title":"Wie können wir Ihnen helfen?","documentation":{"description":"Lesen Sie unsere Online-Dokumentation","button":"Dokumentation"},"support":{"description":"Kontaktieren Sie unseren technischen Support","button":"Technischer Support"},"repository":{"description":"Melden Sie Fehler und Verbesserungen auf GitHub","button":"GitHub"}},"transitionActionNames":{"cancel":"Stornieren","complete":"Abschließen","pay":"Bezahlen","pay_partially":"Teilweise bezahlen","process":"Durchführen","refund":"Rückerstatten","refund_partially":"Teilweise rückerstatten","remind":"Erinnern","reopen":"Wieder öffnen","retour":"Retoure","retour_partially":"Teilweise retounieren","ship":"Versenden","ship_partially":"Teilweise versenden"},"messageNotBlank":"Dieser Wert darf nicht leer sein.","txid":"TXID","sequenceNumber":{"label":"Sequenznummer","empty":"keine"},"transactionState":"Status"}}')},mLM4:function(e,t){e.exports='{% block payone_payment %}\n<sw-page class="payone-payment">\n    {% block payone_payment_header %}\n    <template #smart-bar-header>\n        <h2>\n            {{ $tc(\'sw-settings.index.title\') }}\n            <sw-icon name="small-arrow-medium-right" small></sw-icon>\n            {{ $tc(\'payone-payment.title\') }}\n        </h2>\n    </template>\n    {% endblock %}\n\n    {% block payone_payment_actions %}\n    <template #smart-bar-actions>\n        {% block payone_payment_settings_actions_feedback %}\n        <sw-button\n                @click="isSupportModalOpen = true"\n                :disabled="false"\n                variant="ghost"\n                :square="false"\n                :block="false"\n                :isLoading="false">\n            {{ $tc(\'payone-payment.supportModal.menuButton\') }}\n        </sw-button>\n        {% endblock %}\n\n        {% block payone_payment_settings_actions_test %}\n        <sw-button-process @click="onTest"\n                           :isLoading="isTesting"\n                           :processSuccess="isTestSuccessful"\n                           :disabled="credentialsMissing || isLoading">\n            {{ $tc(\'payone-payment.settingsForm.test\') }}\n        </sw-button-process>\n        {% endblock %}\n\n        {% block payone_payment_settings_actions_save %}\n        <sw-button-process\n                class="sw-settings-login-registration__save-action"\n                :isLoading="isLoading"\n                :processSuccess="isSaveSuccessful"\n                :disabled="isLoading || isTesting"\n                variant="primary"\n                @process-finish="saveFinish"\n                @click="onSave">\n            {{ $tc(\'payone-payment.settingsForm.save\') }}\n        </sw-button-process>\n        {% endblock %}\n    </template>\n    {% endblock %}\n\n    {% block payone_payment_settings_content %}\n    <template #content>\n        <sw-modal\n                v-if="isSupportModalOpen"\n                @modal-close="isSupportModalOpen = false"\n                :title="$tc(\'payone-payment.supportModal.title\')"\n                class="payone-feedback sw-modal--large">\n            <sw-container columns="1fr 1fr 1fr">\n                <div class="payone-feedback__col">\n                    <div class="payone-feedback__icon">\n                        <sw-icon name="default-documentation-file" large="true"></sw-icon>\n                    </div>\n                    <p class="payone-feedback__desc">\n                        {{ $tc(\'payone-payment.supportModal.documentation.description\') }}\n                    </p>\n                    <sw-button\n                            :disabled="false"\n                            variant="primary"\n                            :square="false"\n                            :block="false"\n                            :isLoading="false"\n                            link="https://docs.payone.com/display/public/INT/Shopware+6+Plugin">\n                        {{ $tc(\'payone-payment.supportModal.documentation.button\') }}\n                    </sw-button>\n                </div>\n                <div class="payone-feedback__col">\n                    <div class="payone-feedback__icon">\n                        <sw-icon name="default-device-headset" large="true"></sw-icon>\n                    </div>\n                    <p class="payone-feedback__desc">\n                        {{ $tc(\'payone-payment.supportModal.support.description\') }}\n                    </p>\n                    <sw-button\n                            :disabled="false"\n                            variant="primary"\n                            :square="false"\n                            :block="false"\n                            :isLoading="false"\n                            link="mailto:tech.support@payone.com">\n                        {{ $tc(\'payone-payment.supportModal.support.button\') }}\n                    </sw-button>\n                </div>\n                <div class="payone-feedback__col">\n                    <div class="payone-feedback__icon">\n                        <sw-icon name="default-text-code" large="true"></sw-icon>\n                    </div>\n                    <p class="payone-feedback__desc">\n                        {{ $tc(\'payone-payment.supportModal.repository.description\') }}\n                    </p>\n                    <sw-button\n                            :disabled="false"\n                            variant="primary"\n                            :square="false"\n                            :block="false"\n                            :isLoading="false"\n                            link="https://github.com/PAYONE-GmbH/shopware-6">\n                        {{ $tc(\'payone-payment.supportModal.repository.button\') }}\n                    </sw-button>\n                </div>\n            </sw-container>\n        </sw-modal>\n\n        <sw-card-view>\n            <sw-system-config\n                    ref="systemConfig"\n                    salesChannelSwitchable\n                    inherit\n                    @config-changed="onConfigChange"\n                    domain="PayonePayment.settings">\n                <template #card-element="{ element, config }">\n                    <sw-form-field-renderer\n                            v-if="element.name.startsWith(\'PayonePayment.settings.paymentStatus\')"\n                            :config="{\n                                        componentName: \'sw-single-select\',\n                                        label: getInlineSnippet(element.config.label),\n                                        helpText: getInlineSnippet(element.config.helpText),\n                                        options: stateMachineTransitionActions,\n                                    }"\n                            v-model="config[element.name]"/>\n                    <sw-form-field-renderer\n                            v-else\n                            v-bind="getBind(element, config)"\n                            v-model="config[element.name]"/>\n                </template>\n            </sw-system-config>\n        </sw-card-view>\n    </template>\n    {% endblock %}\n</sw-page>\n{% endblock %}\n'}},[["OPxs","runtime","vendors-node"]]]);