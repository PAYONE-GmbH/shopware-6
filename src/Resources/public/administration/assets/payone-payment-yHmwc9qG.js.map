{"version":3,"mappings":"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","names":["Filter","value","format","decimalPlaces","Component","Utils","cardName","all","key","element","card","isVisible","result","translationKey","translationValue","matches","paymentMethodName","allowedFieldKeys","basicCard","c","elementsToPrepend","fieldKey","cloned","statusTemplateCard","mapInheritance","bind","fieldName","current","originalOnChange","handleToggleChange","nextVal","normalized","activeBucket","owningCard","rtn","configBucket","toggleFieldName","toggleIsOn","toggleElement","e","__vitePreload","deDE","enGB","next","currentRoute","route","Application","ApiService","PayonePaymentService","httpClient","loginService","apiEndpoint","requestBody","apiRoute","response","container","initContainer","PayonePaymentSettingsService","credentials","headers"],"ignoreList":[],"sources":["../../../app/administration/src/module/payone-payment/filter/payone_currency.filter.js","../../../app/administration/src/module/payone-payment/component/payone-payment-settings/index.js","../../../app/administration/src/module/payone-payment/index.js","../../../app/administration/src/module/payone-notification-target/index.js","../../../app/administration/src/module/sw-order/index.js","../../../app/administration/src/api/payone-payment.service.js","../../../app/administration/src/api/payone-payment-settings.service.js","../../../app/administration/src/acl/index.js"],"sourcesContent":["const { Filter } = Shopware;\n\nFilter.register('payone_currency', (value, format, decimalPlaces) => {\n    if (value === null) {\n        return '-';\n    }\n\n    value /= 100;\n\n    return Filter.getByName('currency')(value, format, decimalPlaces);\n});\n","const { Component, Utils } = Shopware;\n\nComponent.extend('payone-payment-settings', 'sw-system-config', {\n\n    inject: ['PayonePaymentSettingsService'],\n\n    methods: {\n        _getShowPaymentStatusFieldsFieldName(cardName) {\n            return `PayonePayment.settings.${cardName}_show_status_mapping`;\n        },\n\n        _getConfigBucket() {\n            const all = this.actualConfigData || {};\n            const key = (this.currentSalesChannelId === null || this.currentSalesChannelId === undefined)\n                ? 'null'\n                : this.currentSalesChannelId;\n            return all[key] || all.null || null;\n        },\n\n        _findCardByElement(element) {\n            return this.config.find(card =>\n                (Array.isArray(card.elements) && card.elements.includes(element)) ||\n                (Array.isArray(card.__payoneCollapsedElementsBuffer) && card.__payoneCollapsedElementsBuffer.includes(element))\n            );\n        },\n\n        setFieldPresentation(element, isVisible) {\n            element.config = element.config || {};\n            if (element._payoneOrigLabel === undefined) {\n                element._payoneOrigLabel = element.config.label;\n            }\n\n            if (element._payoneOrigHelpText === undefined) {\n                element._payoneOrigHelpText = element.config.helpText;\n            }\n            \n            if (isVisible) {\n                element.config.label    = element._payoneOrigLabel;\n                element.config.helpText = element._payoneOrigHelpText;\n            } else {\n                element.config.label    = '';\n                element.config.helpText = undefined;\n            }\n        },\n\n        async readConfig() {\n            this.stateMaschineOptions = await this.PayonePaymentSettingsService.getStateMachineTransitionActions()\n                .then((result) => {\n                    return result.data.map((element) => {\n                        let translationKey = `payone-payment.transitionActionNames.${element.label}`;\n                        let translationValue = this.$t(translationKey);\n\n                        if (translationValue === translationKey) {\n                            translationValue = element.label;\n                        }\n\n                        return {\n                            id: element.value,\n                            name: translationValue,\n                        }\n                    });\n                });\n\n            await this.$super('readConfig');\n\n            this.config.forEach((card) => {\n                const matches = card.name.match(/^payment_(.*)$/);\n                const paymentMethodName = matches ? matches[1] : null;\n\n                if (paymentMethodName) {\n                    this.addApiConfigurationFieldsToPaymentSettingCard(card, paymentMethodName);\n                    this.addPaymentStatusFieldsToPaymentSettingCard(card, paymentMethodName);\n                }\n\n                // make ONLY payment_* cards collapsible; leave basic_configuration etc. alone\n                if (card.name.startsWith('payment_') || card.name === 'status_mapping') {\n                    card.setShowFields = (isVisible) => {\n                        card.showFields = !!isVisible;\n\n                        if (card.showFields) {\n                            // restore buffered elements to render area\n                            if (Array.isArray(card.__payoneCollapsedElementsBuffer) && card.__payoneCollapsedElementsBuffer.length) {\n                                card.elements.splice(0, 0, ...card.__payoneCollapsedElementsBuffer);\n                                card.__payoneCollapsedElementsBuffer.length = 0;\n                            }\n\n                            // unhide everything by default\n                            card.elements.forEach((element) => {\n                                element.hidden = false;\n                                this.setFieldPresentation(element, true);\n                            });\n\n                            // then apply status-mapping visibility (depends on toggle)\n                            this.showPaymentStatusFieldsBasedOnToggle(card);\n                        } else {\n                            // create buffer and move everything out of the card (prevents bool fields from leaking)\n                            if (!Array.isArray(card.__payoneCollapsedElementsBuffer)) {\n                                card.__payoneCollapsedElementsBuffer = [];\n                            }\n                            card.__payoneCollapsedElementsBuffer.length = 0;\n\n                            card.elements.forEach((element) => {\n                                element.hidden = true;\n                                this.setFieldPresentation(element, false);\n                                card.__payoneCollapsedElementsBuffer.push(element);\n                            });\n\n                            // remove all visual elements while collapsed\n                            card.elements.splice(0, card.elements.length);\n                        }\n                    };\n\n                    // start collapsed\n                    card.setShowFields(false);\n                }\n            });\n        },\n\n        addApiConfigurationFieldsToPaymentSettingCard(card, paymentMethodName) {\n            const allowedFieldKeys = ['merchantId', 'accountId', 'portalId', 'portalKey'];\n            const basicCard        = this.config.find(c => c.name === 'basic_configuration');\n            if (!basicCard || !Array.isArray(basicCard.elements)) {\n                return;\n            }\n\n            const elementsToPrepend = [];\n\n            basicCard.elements.forEach((element) => {\n                const matches  = element.name.match(/\\.([^.]+)$/);\n                const fieldKey = matches ? matches[1] : null;\n\n                if (!fieldKey || !allowedFieldKeys.includes(fieldKey)) {\n                    return;\n                }\n\n                const cloned = Utils.object.cloneDeep(element);\n\n                cloned.name = element.name.replace(\n                    '.' + fieldKey,\n                    '.' + paymentMethodName + (fieldKey[0].toUpperCase() + fieldKey.slice(1))\n                );\n\n                cloned.config          = cloned.config || {};\n                cloned.config.helpText = {\n                    'en-GB': 'The basic configuration value is used, if nothing is entered here.',\n                    'de-DE': 'Es wird der Wert aus der Grundeinstellung verwendet, wenn hier kein Wert eingetragen ist.',\n                };\n\n                elementsToPrepend.push(cloned);\n            });\n\n            if (elementsToPrepend.length) {\n                card.elements.splice(0, 0, ...elementsToPrepend);\n            }\n        },\n\n        addPaymentStatusFieldsToPaymentSettingCard(card, paymentMethodName) {\n            card.elements.push({\n                type: 'bool',\n                config: {\n                    componentName: 'mt-switch',\n                    label: {\n                        'en-GB': 'Display state mapping configuration',\n                        'de-DE': 'Statusmappingkonfiguration einblenden',\n                    },\n                    helpText: {\n                        'en-GB': 'If not configured the general status mapping config will be applied.',\n                        'de-DE': 'Sie können für jede Zahlungsart ein spezifisches Statusmapping konfigurieren. Existiert eine solche Konfiguration nicht, wird auf die allgemeine Konfiguration zurückgegriffen.',\n                    }\n                },\n                name: this._getShowPaymentStatusFieldsFieldName(card.name)\n            });\n\n            // pick the source elements regardless of the collapsed state of the status_mapping card\n            const statusTemplateCard = this.config.find(c => c.name === 'status_mapping');\n            if (!statusTemplateCard) {\n                return;\n            }\n\n            const sourceElements = (Array.isArray(statusTemplateCard.elements) && statusTemplateCard.elements.length)\n                ? statusTemplateCard.elements\n                : (statusTemplateCard.__payoneCollapsedElementsBuffer || []);\n\n            sourceElements.forEach((element) => {\n                const cloned= Utils.object.cloneDeep(element);\n\n                cloned.name             = element.name.replace('.paymentStatus', `.${paymentMethodName}PaymentStatus`);\n                cloned.__payoneIsStatus = true;\n                cloned.hidden           = true;\n\n                this.setFieldPresentation(cloned, false);\n\n                card.elements.push(cloned);\n            });\n        },\n\n        getElementBind(element, mapInheritance) {\n            const bind = this.$super('getElementBind', element, mapInheritance);\n\n            // supply options for all status selects\n            if (element.name.includes('PaymentStatus') || element.name.includes('.paymentStatus')) {\n                bind.config         = bind.config || {};\n                bind.config.options = this.stateMaschineOptions;\n            }\n\n            // wire the \"show status mapping\" toggle\n            if (element.name.endsWith('_show_status_mapping')) {\n                const fieldName = element.name;\n                const bucket    = this._getConfigBucket() || {};\n                const current   = !!bucket[fieldName];\n\n                bind.modelValue = current;\n                bind.value      = current;\n\n                const originalOnChange = bind.onChange;\n\n                const handleToggleChange = (nextVal) => {\n                    const normalized = (nextVal === true || nextVal === 'true' || nextVal === 1 || nextVal === '1');\n\n                    const activeBucket = this._getConfigBucket();\n                    if (activeBucket) {\n                        activeBucket[fieldName] = normalized;\n                    }\n\n                    if (typeof originalOnChange === 'function') {\n                        originalOnChange(normalized, fieldName);\n                    }\n\n                    const owningCard = this._findCardByElement(element);\n                    if (owningCard && owningCard.showFields) {\n                        this.showPaymentStatusFieldsBasedOnToggle(owningCard);\n                    }\n                };\n\n                bind['onUpdate:modelValue'] = handleToggleChange;\n                bind.onChange = handleToggleChange;\n            }\n\n            return bind;\n        },\n\n        getInheritWrapperBind(element) {\n            const rtn = this.$super('getInheritWrapperBind', element);\n\n            rtn.hidden = element.hidden;\n\n            return rtn;\n        },\n\n        showPaymentStatusFieldsBasedOnToggle(card) {\n            if (!card || !card.showFields) {\n                return;\n            }\n\n            const configBucket = this._getConfigBucket();\n            if (!configBucket) {\n                return;\n            }\n\n            const toggleFieldName = this._getShowPaymentStatusFieldsFieldName(card.name);\n            const toggleIsOn      = !!configBucket[toggleFieldName];\n\n            // ensure the toggle itself is shown while card is open\n            const toggleElement = card.elements.find(e => e.name === toggleFieldName);\n            if (toggleElement) {\n                toggleElement.hidden = false;\n                this.setFieldPresentation(toggleElement, true);\n            }\n\n            // show/hide only the status-mapping fields; all other fields stay visible while card is open\n            card.elements.forEach((element) => {\n                if (element.__payoneIsStatus) {\n                    element.hidden = !toggleIsOn;\n                    this.setFieldPresentation(element, toggleIsOn);\n                }\n            });\n        },\n\n        emitConfig() {\n            // keep UI consistent when system-config emits updates\n            this.config.forEach(card => this.showPaymentStatusFieldsBasedOnToggle(card));\n            this.$super('emitConfig');\n        }\n    }\n});\n","import deDE from './snippet/de_DE.json';\nimport enGB from './snippet/en_GB.json';\nimport './filter/payone_currency.filter';\nimport './component/payone-payment-settings';\n\nShopware.Component.register('payone-payment-plugin-icon', () => import('./component/payone-payment-plugin-icon'));\nShopware.Component.register('payone-ratepay-profile-configurations', () => import('./component/payone-ratepay-profile-configurations'));\nShopware.Component.register('payone-ratepay-profiles', () => import('./component/payone-ratepay-profiles'));\nShopware.Component.register('payone-settings', () => import('./page/payone-settings'));\n\nShopware.Module.register('payone-payment', {\n    type: 'plugin',\n    name: 'PayonePayment',\n    title: 'payone-payment.general.mainMenuItemGeneral',\n    description: 'payone-payment.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    icon: 'regular-cog',\n\n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n\n    routeMiddleware(next, currentRoute) {\n        next(currentRoute);\n    },\n\n    routes: {\n        index: {\n            component: 'payone-settings',\n            path: 'index',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'payone:configuration'\n            }\n        }\n    },\n\n    settingsItem: [{\n        name:   'payone-payment',\n        to:     'payone.payment.index',\n        label:  'payone-payment.general.mainMenuItemGeneral',\n        group:  'plugins',\n        iconComponent: 'payone-payment-plugin-icon',\n        backgroundEnabled: false,\n        privilege: 'payone:configuration'\n    }],\n});\n","import deDE from './snippet/de_DE.json';\nimport enGB from './snippet/en_GB.json';\n\nShopware.Component.register('payone-notification-target-detail', import('./page/payone-notification-target-detail'));\nShopware.Component.register('payone-notification-target-list', import('./page/payone-notification-target-list'));\n\nShopware.Module.register('payone-notification-target', {\n    type: 'plugin',\n    name: 'PayoneNotificationTarget',\n    title: 'payonePayment.notificationTarget.module.title',\n    description: 'payonePayment.notificationTarget.module.title',\n    icon: 'regular-cog',\n\n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB\n    },\n\n    routes: {\n        list: {\n            component: 'payone-notification-target-list',\n            path: 'list',\n            meta: {\n                privilege: 'payone_payment_notification_target:read'\n            }\n        },\n        detail: {\n            component: 'payone-notification-target-detail',\n            path: 'detail/:id',\n            props: {\n               default(route) {\n                   return {\n                       notificationTargetId: route.params.id\n                   };\n               }\n            },\n            meta: {\n                parentPath: 'payone.notification.target.list',\n                privilege: 'payone_payment_notification_target:read'\n            }\n        },\n        create: {\n            component: 'payone-notification-target-detail',\n            path: 'create',\n            meta: {\n                parentPath: 'payone.notification.target.list',\n                privilege: 'payone_payment_notification_target:create'\n            }\n        }\n    }\n});\n","Shopware.Component.register('payone-capture-button', () => import('./component/payone-capture-button'));\nShopware.Component.register('payone-order-items', () => import('./component/payone-order-items'));\nShopware.Component.register('payone-payment-management', () => import('./component/payone-payment-management'));\nShopware.Component.register('payone-payment-order-action-log', () => import('./component/payone-payment-order-action-log'));\nShopware.Component.register('payone-payment-webhook-log', () => import('./component/payone-payment-webhook-log'));\nShopware.Component.register('payone-refund-button', () => import('./component/payone-refund-button'));\nShopware.Component.register('sw-order-detail-payone', () => import('./view/sw-order-detail-payone'));\n\nShopware.Component.override('sw-order-detail', () => import('./page/sw-order-detail'));\n\nShopware.Module.register('sw-order-detail-tab-payone', {\n  routeMiddleware(next, currentRoute) {\n    if (currentRoute.name === 'sw.order.detail') {\n      currentRoute.children.push({\n        name: 'sw.order.detail.payone',\n        path: 'payone',\n        component: 'sw-order-detail-payone',\n        meta: {\n          parentPath: \"sw.order.detail\",\n          meta: {\n            parentPath: 'sw.order.index',\n            privilege: 'order.viewer',\n          },\n        }\n      });\n    }\n    next(currentRoute);\n  }\n});\n","const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass PayonePaymentService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'payone') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    requeueNotificationForward(requestBody) {\n        const apiRoute = `_action/${this.getApiBasePath()}/requeue-forward`;\n\n        return this.httpClient.post(\n            apiRoute,\n            requestBody,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    capturePayment(requestBody) {\n        const apiRoute = `_action/${this.getApiBasePath()}/capture-payment`;\n\n        return this.httpClient.post(\n            apiRoute,\n            requestBody,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    refundPayment(requestBody) {\n        const apiRoute = `_action/${this.getApiBasePath()}/refund-payment`;\n\n        return this.httpClient.post(\n            apiRoute,\n            requestBody,\n            {\n                headers: this.getBasicHeaders()\n            }\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nApplication.addServiceProvider('PayonePaymentService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new PayonePaymentService(initContainer.httpClient, container.loginService);\n});\n\n","const { Application } = Shopware;\nconst ApiService = Shopware.Classes.ApiService;\n\nclass PayonePaymentSettingsService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'payone_payment') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    validateApiCredentials(credentials) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/validate-api-credentials`,\n                {\n                    credentials: credentials,\n                },\n                {\n                    headers: headers\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getStateMachineTransitionActions() {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `_action/${this.getApiBasePath()}/get-state-machine-transition-actions`,\n                {\n                    headers: headers\n                }\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    hasApplePayCert() {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `_action/${this.getApiBasePath()}/check-apple-pay-cert`,\n                {\n                    headers: headers\n                }\n            )\n            .catch(() => {\n                return false;\n            })\n            .then((response) => {\n                if(!response) {\n                    return false;\n                }\n                return true;\n            });\n    }\n}\n\nApplication.addServiceProvider('PayonePaymentSettingsService', (container) => {\n    const initContainer = Application.getContainer('init');\n\n    return new PayonePaymentSettingsService(initContainer.httpClient, container.loginService);\n});\n\n","try {\n    Shopware.Service('privileges').addPrivilegeMappingEntry({\n        category: 'additional_permissions',\n        parent: null,\n        key: 'Payone',\n        roles: {\n            payone_order_management: {\n                privileges: [\n                    // 'order_transaction:update',\n                    // 'order_line_item:update',\n                    // 'state_machine_history:create',\n                    // Shopware.Service('privileges').getPrivileges('order.viewer'),\n\n                    'payone_order_management',\n\n                    'payone_payment_order_transaction_data:read',\n                    'payone_payment_order_transaction_data:update',\n\n                    'payone_payment_order_action_log:read',\n                    'payone_payment_order_action_log:create',\n\n                    'payone_payment_webhook_log:read',\n                    'payone_payment_notification_forward:read',\n                    'payone_payment_notification_forward:create',\n                ],\n                dependencies: []\n            },\n            payone_configuration: {\n                privileges: [\n                    'system_config:read',\n                    'system_config:create',\n                    'system_config:update',\n                    'system_config:delete',\n                    'currency:read',\n                    'sales_channel:read',\n                    'payone:configuration'\n                ],\n                dependencies: []\n            },\n            payone_webhook_forward: {\n                privileges: [\n                    'payone_payment_notification_target:read',\n                    'payone_payment_notification_target:create',\n                    'payone_payment_notification_target:update',\n                    'payone_payment_notification_target:delete',\n                    'payone:manage_webhook_forwards'\n                ],\n                dependencies: []\n            },\n            payone_webhook_resend: {\n                privileges: [\n                    'payone_webhook_resend'\n                ],\n                dependencies: []\n            }\n        }\n    });\n} catch(e) {\n\n}\n"],"file":"assets/payone-payment-yHmwc9qG.js"}