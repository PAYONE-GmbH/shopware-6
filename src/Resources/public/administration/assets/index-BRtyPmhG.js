const i=`{% block payone_notification_target_list %} <sw-page class="sw-review-list"> {% block payone_notification_target_list_smart_bar_header %} <template #smart-bar-header> {% block payone_notification_target_list_smart_bar_header_title %} <h2> {% block payone_notification_target_list_smart_bar_header_title_text %} {{ $t('payonePayment.notificationTarget.list.title') }} {% endblock %} {% block payone_notification_target_list_smart_bar_header_amount %} <span v-if="!isLoading" class="sw-page__smart-bar-amount" >({{ items.total }})</span> {% endblock %} </h2> {% endblock %} </template> {% endblock %} {% block payone_notification_target_list_actions %} <template #smart-bar-actions> {% block payone_notification_target_list_smart_bar_actions %} <mt-button @click="$router.push({ name: 'payone.notification.target.create' })" variant="primary" v-if="acl.can('payone_payment_notification_target:create')" > {{ $t('payonePayment.notificationTarget.list.buttonCreate') }} </mt-button> {% endblock %} </template> {% endblock %} {% block payone_notification_target_list_content %} <template #content> {% block payone_notification_target_list_content_list %} <sw-entity-listing v-if="items" ref="payoneNotificationTargetGrid" detailRoute="payone.notification.target.detail" :limit="criteriaLimit" :repository="repository" :columns="notificationTargetColumns" :items="items" @column-sort="onSortColumn" :disableDataFetching="true" :sortBy="sortBy" :showSelection="false" :sortDirection="sortDirection" identifier="payone-notification-target-list" :allowInlineEdit="false" :allowBulkEdit="false" :allowColumnEdit="acl.can('payone_payment_notification_target:update')" :allowEdit="acl.can('payone_payment_notification_target:update')" :allowDelete="acl.can('payone_payment_notification_target:delete')" > {% block payone_notification_target_list_grid_columns %} {% block payone_notification_target_list_grid_columns_url %} <template #column-url="{ item }"> <router-link :to="{ name: 'payone.notification.target.detail', params: { id: item.id } }" v-if="acl.can('payone_payment_notification_target:update')" > {{ item.url }} </router-link> <span v-else>{{ item.url }}</span> </template> {% endblock %} {% block payone_notification_target_list_grid_columns_is_basic_auth %} <template #column-isBasicAuth="{ item }"> <mt-icon v-if="item.isBasicAuth" name="regular-checkmark-xs" size="16px" class="is--active" ></mt-icon> <mt-icon v-else name="regular-times-s" size="16px" class="is--inactive" ></mt-icon> </template> {% endblock %} {% block payone_notification_target_list_grid_columns_txactions %} <template #column-txactions="{ item }"> {{ renderTxactions(item.txactions) }} </template> {% endblock %} {% endblock %} </sw-entity-listing> {% endblock %} {% block payone_notification_target_list_empty_state %} <sw-empty-state v-if="!isLoading && !total" icon="regular-repeat" :title="$t('payonePayment.notificationTarget.list.empty')" > </sw-empty-state> {% endblock %} </template> {% endblock %} {% block payone_notification_target_list_sidebar %} <template #sidebar> <sw-sidebar> {% block payone_notification_target_list_sidebar_refresh %} <sw-sidebar-item icon="regular-undo" :title="$t('sw-review.list.titleSidebarItemRefresh')" @click="onRefresh" > </sw-sidebar-item> {% endblock %} </sw-sidebar> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:a,Data:{Criteria:n}}=Shopware,o={template:i,inject:["repositoryFactory","acl"],mixins:[a.getByName("listing")],data(){return{isLoading:!1,items:null,sortBy:"createdAt",criteriaLimit:500,criteriaPage:1,limit:500}},metaInfo(){return{title:this.$createTitle()}},computed:{notificationTargetColumns(){return[{dataIndex:"url",property:"url",label:"payonePayment.notificationTarget.columns.url",primary:!0},{dataIndex:"isBasicAuth",property:"isBasicAuth",label:"payonePayment.notificationTarget.columns.isBasicAuth"},{property:"txactions",label:"payonePayment.notificationTarget.columns.txactions"}]},repository(){return this.repositoryFactory.create("payone_payment_notification_target")},criteria(){return new n(this.criteriaPage,this.criteriaLimit)}},created(){this.createdComponent()},methods:{renderTxactions(t){return t===null||!t.length?"":t.join(", ")},createdComponent(){this.getList()},getList(){this.isLoading=!0;const t={...Shopware.Context.api,inheritance:!0};return this.repository.search(this.criteria,t).then(e=>{this.total=e.total,this.items=e,this.isLoading=!1})},onDelete(t){this.$refs.listing.deleteItem(t),this.getList()}}};export{o as default};
//# sourceMappingURL=index-BRtyPmhG.js.map
