const n=`{% block payone_payment_order_action_log %} <mt-card class="payone-payment-order-action-log-card" position-identifier="payone-payment-order-action-log-card" :title="$t('sw-order.payone-payment.orderActionLog.cardTitle')" > <sw-data-grid v-if="orderActionLogs.length > 0" :showSelection="false" :dataSource="orderActionLogs" :columns="orderActionLogColumns" :isLoading="isLoading" > <template #column-amount="{ item }"> {{ currencyFilter(item.amount / 100, order.currency.isoCode) }} </template> <template #column-requestDateTime="{ item }"> {{ dateFilter(item.requestDateTime, { hour: '2-digit', minute: '2-digit' }) }} </template> <template #actions="{ item }"> <sw-context-menu-item @click="openRequest(item)"> {{ $t('sw-order.payone-payment.orderActionLog.contextMenu.openRequestDetails') }} </sw-context-menu-item> <sw-context-menu-item @click="openResponse(item)"> {{ $t('sw-order.payone-payment.orderActionLog.contextMenu.openResponseDetails') }} </sw-context-menu-item> </template> <template #action-modals="{ item }"> <sw-modal v-if="showRequestDetails" :title="$t('sw-order.payone-payment.orderActionLog.requestDetailsModal.title')" variant="large" @modal-close="onCloseRequestModal" > <mt-button variant="primary" @click="downloadAsTxt(showRequestDetails, 'request', item.transactionId)" > {{ $t('sw-order.payone-payment.orderActionLog.requestDetailsModal.downloadButton') }} </mt-button> <sw-data-grid :showSelection="false" :showActions="false" :dataSource="toKeyValueSource(showRequestDetails)" :columns="keyValueColumns" :isLoading="isLoading" > </sw-data-grid> </sw-modal> <sw-modal v-if="showResponseDetails" :title="$t('sw-order.payone-payment.orderActionLog.responseDetailsModal.title')" variant="large" @modal-close="onCloseResponseModal" > <mt-button variant="primary" @click="downloadAsTxt(showResponseDetails, 'response', item.transactionId)" > {{ $t('sw-order.payone-payment.orderActionLog.responseDetailsModal.downloadButton') }} </mt-button> <sw-data-grid :showSelection="false" :showActions="false" :dataSource="toKeyValueSource(showResponseDetails)" :columns="keyValueColumns" :isLoading="isLoading" > </sw-data-grid> </sw-modal> </template> </sw-data-grid> <sw-empty-state v-else :absolute="false" :title="$t('sw-order.payone-payment.orderActionLog.emptyState.title')" :subline="$t('sw-order.payone-payment.orderActionLog.emptyState.subline')" > <template #icon> <img :src="assetFilter('/administration/administration/static/img/empty-states/order-empty-state.svg')" :alt="$t('sw-order.payone-payment.orderActionLog.emptyState.title')" /> </template> </sw-empty-state> </mt-card> {% endblock %}`,{Criteria:s}=Shopware.Data,{Filter:a}=Shopware,i={template:n,inject:["repositoryFactory"],props:{order:{type:Object,required:!0}},data(){return{orderActionLogs:[],isLoading:!1,showRequestDetails:null,showResponseDetails:null}},computed:{orderActionLogRepository(){return this.repositoryFactory.create("payone_payment_order_action_log")},dateFilter(){return a.getByName("date")},currencyFilter(){return a.getByName("currency")},assetFilter(){return a.getByName("asset")},payoneCurrencyFilter(){return a.getByName("payone_currency")},orderActionLogColumns(){return[{property:"transactionId",label:this.$t("sw-order.payone-payment.orderActionLog.columnTitleTransactionId")},{property:"request",label:this.$t("sw-order.payone-payment.orderActionLog.columnTitleRequest")},{property:"response",label:this.$t("sw-order.payone-payment.orderActionLog.columnTitleResponse")},{property:"amount",label:this.$t("sw-order.payone-payment.orderActionLog.columnTitleAmount")},{property:"requestDateTime",label:this.$t("sw-order.payone-payment.orderActionLog.columnTitleRequestDateTime")}]},keyValueColumns(){return[{property:"key",label:this.$t("sw-order.payone-payment.orderActionLog.columnTitleKey")},{property:"value",label:this.$t("sw-order.payone-payment.orderActionLog.columnTitleValue")}]}},created(){this.createdComponent()},methods:{createdComponent(){this.getOrderActionLogs()},reloadActionLogs(){this.getOrderActionLogs()},getOrderActionLogs(){const e=new s;return e.addFilter(s.equals("orderId",this.order.id)),e.addSorting(s.sort("requestDateTime","ASC",!0)),this.isLoading=!0,this.orderActionLogRepository.search(e,Shopware.Context.api).then(t=>{this.orderActionLogs=t,this.isLoading=!1})},openRequest(e){this.showRequestDetails=e.requestDetails},openResponse(e){this.showResponseDetails=e.responseDetails},onCloseRequestModal(){this.showRequestDetails=null},onCloseResponseModal(){this.showResponseDetails=null},toKeyValueSource(e){const t=[];for(const o in e)t.push({key:o,value:e[o]});return t.sort((o,r)=>o.key.localeCompare(r.key)),t},downloadAsTxt(e,t,o){const r=document.createElement("a");r.href="data:text/plain;charset=utf-8,"+encodeURIComponent(JSON.stringify(e,null,4)),r.download=`PAYONE-${t}-${o}.txt`,r.dispatchEvent(new MouseEvent("click")),r.remove()}}};export{i as default};
//# sourceMappingURL=index-Be5-UySV.js.map
