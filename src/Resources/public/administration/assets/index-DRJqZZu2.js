const e=`{% block payone_notification_target_detail %} <sw-page class="payone-notification-target-detail"> {% block payone_notification_target_detail_header %} <template #smart-bar-header> <h2> {{ $t('payonePayment.notificationTarget.detail.headline') }} </h2> </template> {% endblock %} {% block payone_notification_target_detail_actions %} <template #smart-bar-actions> {% block payone_notification_target_detail_actions_abort %} <mt-button :disabled="notificationTargetIsLoading" @click="onCancel" variant="secondary" > {{ $t('payonePayment.notificationTarget.detail.label.buttonCancel') }} </mt-button> {% endblock %} {% block payone_notification_target_detail_actions_save %} <sw-button-process class="payone-notification-target-detail__save-action" :isLoading="isLoading" v-model="isSaveSuccessful" :disabled="isLoading" variant="primary" :process-success="processSuccess" @click.prevent="onSave" > {{ $t('payonePayment.notificationTarget.detail.label.buttonSave') }} </sw-button-process> {% endblock %} </template> {% endblock %} <template #content> {% block payone_notification_target_detail_content %} <sw-card-view> {% block payone_notification_target_detail_base_basic_info_card %} <mt-card position-identifier="payone-notification-target-detail-content" :title="$t('payonePayment.notificationTarget.detail.headline')" :isLoading="notificationTargetIsLoading" > <template v-if="!notificationTargetIsLoading"> <sw-container class="payone-notification-target-detail__container" columns="repeat(auto-fit, minmax(250px, 1fr))" gap="0 30px" > <div class="payone-notification-target-detail__base-info-wrapper" > {% block payone_notification_target_detail_base_info_field_url %} <mt-text-field :label="$t('payonePayment.notificationTarget.detail.label.url')" :placeholder="$t('payonePayment.notificationTarget.detail.placeholder.url')" name="url" validation="required" required v-model="notificationTarget.url" > </mt-text-field> {% endblock %} {% block payone_notification_target_detail_base_info_field_is_basic_auth %} <mt-checkbox :label="$t('payonePayment.notificationTarget.detail.label.isBasicAuth')" name="isBasicAuth" v-model:checked="notificationTarget.isBasicAuth" > </mt-checkbox> {% endblock %} {% block payone_notification_target_detail_base_info_field_is_basic_auth_fields %} <mt-text-field v-if="notificationTarget.isBasicAuth" :label="$t('payonePayment.notificationTarget.detail.label.username')" :placeholder="$t('payonePayment.notificationTarget.detail.placeholder.username')" name="username" required v-model="notificationTarget.username" > </mt-text-field> <mt-password-field v-if="notificationTarget.isBasicAuth" :label="$t('payonePayment.notificationTarget.detail.label.password')" :placeholder="$t('payonePayment.notificationTarget.detail.placeholder.password')" name="password" required v-model="notificationTarget.password" ></mt-password-field> {% endblock %} {% block payone_notification_target_detail_base_info_field_txactions %} <sw-multi-select :label="$t('payonePayment.notificationTarget.detail.label.txactions')" :options="txactionsOptions" v-model:value="notificationTarget.txactions" > </sw-multi-select> {% endblock %} </div> </sw-container> </template> </mt-card> {% endblock %} </sw-card-view> {% endblock %} </template> </sw-page> {% endblock %}`,{Mixin:a}=Shopware,i={template:e,inject:["repositoryFactory"],mixins:[a.getByName("notification")],shortcuts:{"SYSTEMKEY+S":"onSave",ESCAPE:"onCancel"},props:{notificationTargetId:{type:String,required:!1,default:null}},data(){return{notificationTarget:null,isLoading:!1,isSaveSuccessful:!1,processSuccess:!1}},metaInfo(){return{title:this.$createTitle(this.identifier)}},computed:{notificationTargetIsLoading(){return this.isLoading||this.notificationTarget==null},notificationTargetRepository(){return this.repositoryFactory.create("payone_payment_notification_target")},txactionsOptions(){return[{value:"appointed",label:"appointed"},{value:"capture",label:"capture"},{value:"paid",label:"paid"},{value:"underpaid",label:"underpaid"},{value:"cancelation",label:"cancelation"},{value:"refund",label:"refund"},{value:"debit",label:"debit"},{value:"transfer",label:"transfer"},{value:"reminder",label:"reminder"},{value:"vauthorization",label:"vauthorization"},{value:"vsettlement",label:"vsettlement"},{value:"invoice",label:"invoice"},{value:"failed",label:"failed"}]}},watch:{notificationTargetId(){this.createdComponent()}},created(){this.createdComponent()},methods:{createdComponent(){if(this.notificationTargetId){this.loadEntityData();return}Shopware.Store.get("context").isSystemDefaultLanguage||Shopware.Store.get("context").resetLanguageToDefault(),this.notificationTarget=this.notificationTargetRepository.create(Shopware.Context.api)},loadEntityData(){this.isLoading=!0,this.notificationTargetRepository.get(this.notificationTargetId,Shopware.Context.api).then(t=>{this.isLoading=!1,this.notificationTarget=t,t.txactions!==null&&(t.txactions.length||(this.notificationTarget.txactions=null))})},isInvalid(){return this.notificationTarget.isBasicAuth!==!0||this.notificationTarget.username&&this.notificationTarget.password?!1:(this.createNotificationError({message:this.$t("global.notification.notificationSaveErrorMessageRequiredFieldsInvalid")}),!0)},onSave(){this.isInvalid()||(this.isLoading=!0,this.notificationTargetRepository.save(this.notificationTarget,Shopware.Context.api).then(()=>{if(this.isLoading=!1,this.isSaveSuccessful=!0,this.createNotificationSuccess({message:this.$t("payonePayment.notificationTarget.messages.successfullySaved")}),this.notificationTargetId===null){this.$router.push({name:"payone.notification.target.detail",params:{id:this.notificationTarget.id}});return}this.loadEntityData()}).catch(t=>{throw this.isLoading=!1,this.createNotificationError({message:this.$t("global.notification.notificationSaveErrorMessageRequiredFieldsInvalid")}),t}))},onCancel(){this.$router.push({name:"payone.notification.target.list"})}}};export{i as default};
//# sourceMappingURL=index-DRJqZZu2.js.map
