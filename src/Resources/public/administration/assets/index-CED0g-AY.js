const i=`{% block payone_payment_webhook_log %} <mt-card class="payone-payment-webhook-log-card" position-identifier="payone-payment-webhook-log-card" :title="$t('sw-order.payone-payment.webhookLog.cardTitle')" > <sw-data-grid v-if="webhookLogs.length > 0" :showSelection="false" :dataSource="webhookLogs" :columns="webhookLogColumns" :isLoading="isLoading" > <template #column-webhookDateTime="{ item }"> {{ dateFilter(item.webhookDateTime, { hour: '2-digit', minute: '2-digit' }) }} </template> <template #actions="{ item }"> <sw-context-menu-item @click="openDetails(item)"> {{ $t('sw-order.payone-payment.webhookLog.contextMenu.openWebhookDetails') }} </sw-context-menu-item> </template> <template #action-modals="{ item }"> <sw-modal v-if="showWebhookDetails" :title="$t('sw-order.payone-payment.webhookLog.webhookDetailsModal.title')" variant="large" @modal-close="onCloseWebhookModal" > <mt-button variant="primary" @click="downloadAsTxt(showWebhookDetails, 'webhook', item.transactionId)" > {{ $t('sw-order.payone-payment.webhookLog.webhookDetailsModal.downloadButton') }} </mt-button> <sw-data-grid :showSelection="false" :showActions="false" :dataSource="toKeyValueSource(showWebhookDetails)" :columns="keyValueColumns" :isLoading="isLoading" > </sw-data-grid> </sw-modal> </template> </sw-data-grid> <sw-empty-state v-else :absolute="false" :title="$t('sw-order.payone-payment.webhookLog.emptyState.title')" :subline="$t('sw-order.payone-payment.webhookLog.emptyState.subline')" > <template #icon> <img :src="assetFilter('/administration/administration/static/img/empty-states/order-empty-state.svg')" :alt="$t('sw-order.payone-payment.webhookLog.emptyState.title')" /> </template> </sw-empty-state> </mt-card> {% endblock %}`,{Criteria:s}=Shopware.Data,{Filter:n}=Shopware,r={template:i,inject:["repositoryFactory"],props:{order:{type:Object,required:!0}},data(){return{webhookLogs:[],isLoading:!1,showWebhookDetails:null}},computed:{webhookLogRepository(){return this.repositoryFactory.create("payone_payment_webhook_log")},assetFilter(){return n.getByName("asset")},dateFilter(){return n.getByName("date")},webhookLogColumns(){return[{property:"transactionId",label:this.$t("sw-order.payone-payment.webhookLog.columnTitleTransactionId")},{property:"transactionState",label:this.$t("sw-order.payone-payment.webhookLog.columnTitleTransactionState")},{property:"sequenceNumber",label:this.$t("sw-order.payone-payment.webhookLog.columnTitleSequenceNumber")},{property:"clearingType",label:this.$t("sw-order.payone-payment.webhookLog.columnTitleClearingType")},{property:"webhookDateTime",label:this.$t("sw-order.payone-payment.webhookLog.columnTitleWebhookDateTime")}]},keyValueColumns(){return[{property:"key",label:this.$t("sw-order.payone-payment.webhookLog.columnTitleKey")},{property:"value",label:this.$t("sw-order.payone-payment.webhookLog.columnTitleValue")}]}},created(){this.createdComponent()},methods:{createdComponent(){this.getWebhookLogs()},reloadWebhookLogs(){this.getWebhookLogs()},getWebhookLogs(){const e=new s;return e.addFilter(s.equals("orderId",this.order.id)),e.addSorting(s.sort("webhookDateTime","ASC",!0)),this.isLoading=!0,this.webhookLogRepository.search(e,Shopware.Context.api).then(o=>{this.webhookLogs=o,this.isLoading=!1})},openDetails(e){this.showWebhookDetails=e.webhookDetails},onCloseWebhookModal(){this.showWebhookDetails=null},toKeyValueSource(e){const o=[];for(const t in e)o.push({key:t,value:e[t]});return o.sort((t,a)=>t.key.localeCompare(a.key)),o},downloadAsTxt(e,o,t){const a=document.createElement("a");a.href="data:text/plain;charset=utf-8,"+encodeURIComponent(JSON.stringify(e,null,4)),a.download=`PAYONE-${o}-${t}.txt`,a.dispatchEvent(new MouseEvent("click")),a.remove()}}};export{r as default};
//# sourceMappingURL=index-CED0g-AY.js.map
