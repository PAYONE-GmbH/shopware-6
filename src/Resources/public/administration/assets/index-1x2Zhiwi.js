const o=`{% block payone_payment_management %} <div class="payone-payment-management"> <template v-for="(transaction, index) in payoneTransactions"> <mt-card class="payone-payment-management-card" position-identifier="payone-payment-management-card" :title="index === 0 ? $t('sw-order.payone-payment.general.cardTitle') : ''" > <sw-container columns="1fr 1fr"> <sw-container> <sw-description-list> <dt> {{ $t('sw-order.payone-payment.paymentMethod') }} </dt> <dd class="sw-order-base__label-sales-channel"> {{ transaction.paymentMethod.translated.distinguishableName }} </dd> <template v-if="getPayoneCardType(transaction)"> <dt> {{ $t('sw-order.payone-payment.creditCard.cardTypeLabel') }} </dt> <dd class="sw-order-base__label-sales-channel"> {{ getPayoneCardType(transaction) }} </dd> </template> <dt> {{ $t('sw-order.payone-payment.txid') }} </dt> <dd class="sw-order-base__label-sales-channel"> {{ transaction.extensions.payonePaymentOrderTransactionData.transactionId }} </dd> <dt> {{ $t('sw-order.payone-payment.sequenceNumber.label') }} </dt> <dd class="sw-order-base__label-sales-channel"> <span v-if="transaction.extensions.payonePaymentOrderTransactionData.sequenceNumber == -1" > {{ $t('sw-order.payone-payment.sequenceNumber.empty') }} </span> <span v-else> {{ transaction.extensions.payonePaymentOrderTransactionData.sequenceNumber }} </span> </dd> <dt> {{ $t('sw-order.payone-payment.transactionState') }} </dt> <dd class="sw-order-base__label-sales-channel" v-if="isActiveTransaction(transaction)" > {{ transaction.extensions.payonePaymentOrderTransactionData.transactionState }} </dd> <dd class="sw-order-base__label-sales-channel" v-else > {{ $t('sw-order.payone-payment.transactionCancelled') }} </dd> </sw-description-list> </sw-container> <sw-container gap="30px" v-if="acl.can('Payone.payone_order_management') && isActiveTransaction(transaction)" > <payone-capture-button :order="order" :transaction="transaction" v-on:reload="reloadEntityData" ></payone-capture-button> <payone-refund-button :order="order" :transaction="transaction" v-on:reload="reloadEntityData" ></payone-refund-button> </sw-container> </sw-container> <sw-container v-if="acl.can('payone_payment_notification_forward:read') && hasNotificationForwards(transaction)" gap="10px" class="payone-payment-management-notification-forwards" > <b> {{ $t('payonePayment.notificationTarget.list.title') }} </b> <sw-data-grid :dataSource="notificationForwards" :selectable="false" :isFullpage="false" :showSelection="false" :compactMode="true" :showActions="true" :allowInlineEdit="false" :columns="notificationTargetColumns" :plainAppearance="true" :showHeader="false" table > <template #column-updatedAt="{ item }"> {{ dateFilter(item.updatedAt, { hour: '2-digit', minute: '2-digit' }) }} </template> <template #actions="{ item }"> <sw-context-menu-item v-if="acl.can('payone_webhook_resend')" @click="requeue(item, transaction)" > {{ $t('payonePayment.notificationTarget.actions.requeue') }} </sw-context-menu-item> </template> </sw-data-grid> </sw-container> </mt-card> </template> </div> {% endblock %}`,{Mixin:i,Filter:s}=Shopware,{Criteria:r}=Shopware.Data,c={template:o,inject:["acl","PayonePaymentService","repositoryFactory"],mixins:[i.getByName("notification")],props:{order:{type:Object,required:!0}},data(){return{notificationForwards:null}},computed:{dateFilter(){return s.getByName("date")},payoneTransactions:function(){return this.order.transactions.filter(t=>this.isPayoneTransaction(t)).sort((t,e)=>t.createdAt<e.createdAt?1:t.createdAt>e.createdAt?-1:0)},notificationForwardRepository(){return this.repositoryFactory.create("payone_payment_notification_forward")},notificationTargetColumns(){return[{property:"txaction",type:"text",width:"100px"},{property:"notificationTarget.url",type:"text"},{property:"response",width:"100px"},{property:"updatedAt",align:"right",type:"date"}]}},methods:{isPayoneTransaction(t){return!t.extensions||!t.extensions.payonePaymentOrderTransactionData||!t.extensions.payonePaymentOrderTransactionData.transactionId?!1:t.extensions.payonePaymentOrderTransactionData.transactionId},isActiveTransaction(t){return t.stateMachineState.technicalName!=="cancelled"},hasNotificationForwards(t){return this.notificationForwards===null?(this.getNotificationForwards(t),!1):this.notificationForwards.length>0},getNotificationForwards(t){const e=new r;return e.addAssociation("notificationTarget"),e.addSorting(r.sort("updatedAt","DESC",!0)),e.addFilter(r.equals("transactionId",t.id)),e.setLimit(500),this.notificationForwardRepository.search(e,Shopware.Context.api).then(a=>{this.notificationForwards=a})},requeue(t,e){const a={notificationForwardId:t.id};this.PayonePaymentService.requeueNotificationForward(a).then(()=>{this.createNotificationSuccess({title:this.$t("payonePayment.notificationTarget.actions.requeue"),message:this.$t("payonePayment.notificationTarget.messages.success")}),this.getNotificationForwards(e)}).catch(n=>{this.createNotificationError({title:this.$t("payonePayment.notificationTarget.actions.requeue"),message:n.message})}).finally(()=>{this.$nextTick().then(()=>{this.$emit("reload")})})},reloadEntityData(){this.$emit("reload-entity-data")},getPayoneCardType(t){var a,n;let e=(n=(a=t.extensions.payonePaymentOrderTransactionData)==null?void 0:a.additionalData)==null?void 0:n.card_type;return e?this.$t("sw-order.payone-payment.creditCard.cardTypes."+e):null}}};export{c as default};
//# sourceMappingURL=index-1x2Zhiwi.js.map
