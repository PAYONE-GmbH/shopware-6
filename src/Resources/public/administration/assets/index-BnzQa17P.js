const i=`{% block payone_payment_details %} <div class="payone-order-items"> <sw-data-grid :dataSource="items" :columns="orderItemColumns" :showActions="false" :showSelection="true" @selection-change="updateSelection" :isRecordSelectable="(item) => !item.disabled" :compactMode="false" > <template #column-product="{ item, isInlineEdit }"> <div> <div> <span>{{ item.product }}</span> </div> <div> <small style="line-height: 1;" v-if="item.orderItem && item.orderItem.payload" > <div v-if="item.orderItem.payload.options"> <span> {{ $t('sw-order.payone-payment.modal.productOptions') }} : </span> <span v-for="option, index in item.orderItem.payload.options" > {{ option.group }}:{{ option.option }} <template v-if="index < item.orderItem.payload.options.length - 1" >, </template> </span> </div> <div> {{ $t('sw-order.payone-payment.modal.productNumber') }}:{{ item.orderItem.payload.productNumber }} </div> </small> </div> </div> </template> <template #column-quantity="{ item, isInlineEdit }"> <mt-number-field v-model="item.quantity" type="number" :step="1" :min="0" :disabled="item.disabled || !item.selected" :max="item.maxQuantity" slot="inline-edit" size="small" placeholder="0" ></mt-number-field> </template> <template #column-price="{ item }"> {{ currencyFilter(item.unit_price, order.currency.shortName) }} </template> </sw-data-grid> </div> {% endblock %}`,{Filter:r}=Shopware,a={template:i,props:{items:{type:Array,required:!0},order:{type:Object,required:!0}},computed:{currencyFilter:()=>r.getByName("currency"),orderItemColumns(){return[{property:"product",label:this.$t("sw-order.payone-payment.modal.columns.product"),rawData:!0},{property:"quantity",label:this.$t("sw-order.payone-payment.modal.columns.quantity"),rawData:!0},{property:"price",label:this.$t("sw-order.payone-payment.modal.columns.price"),rawData:!0}]}},methods:{updateSelection(t){const o=Object.keys(t);this.items.forEach(e=>{e.selected=o.includes(e.id)})}}};export{a as default};
//# sourceMappingURL=index-BnzQa17P.js.map
