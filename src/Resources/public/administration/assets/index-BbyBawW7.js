const c=`{% block payone_payment %} <sw-page class="payone-payment"> {% block payone_payment_header %} <template #smart-bar-header> <h2> {{ $t('sw-settings.index.title') }} <mt-icon name="regular-chevron-right-xs" size="16px" ></mt-icon> {{ $t('payone-payment.title') }} </h2> </template> {% endblock %} {% block payone_payment_actions %} <template #smart-bar-actions> {% block payone_payment_settings_actions_feedback %} <mt-button @click="isSupportModalOpen = true" :disabled="false" :square="false" :block="false" :isLoading="false" variant="primary" size="default" ghost > {{ $t('payone-payment.supportModal.menuButton') }} </mt-button> {% endblock %} {% block payone_payment_settings_actions_notification_forward_target %} <mt-button @click="$router.push({ name: 'payone.notification.target.list' })" :disabled="false" :square="false" :block="false" :isLoading="false" variant="secondary" size="default" v-if="acl.can('payone_payment_notification_target:read')" ghost > {{ $t('payonePayment.notificationTarget.module.buttonTitle') }} </mt-button> {% endblock %} {% block payone_payment_settings_actions_test %} <sw-button-process @click="onTest" :isLoading="isTesting" :processSuccess="isTestSuccessful" :disabled="isLoading" > {{ $t('payone-payment.settingsForm.test') }} </sw-button-process> {% endblock %} {% block payone_payment_settings_actions_save %} <sw-button-process class="sw-settings-login-registration__save-action" :isLoading="isLoading" :processSuccess="isSaveSuccessful" :disabled="isLoading || isTesting" variant="primary" @process-finish="saveFinish" @click="onSave" > {{ $t('payone-payment.settingsForm.save') }} </sw-button-process> {% endblock %} </template> {% endblock %} {% block payone_payment_settings_content %} <template #content> <sw-modal v-if="isSupportModalOpen" @modal-close="isSupportModalOpen = false" :title="$t('payone-payment.supportModal.title')" class="payone-feedback sw-modal--large" > <sw-container columns="1fr 1fr 1fr 1fr"> <div class="payone-feedback__col"> <div class="payone-feedback__text"> <div class="payone-feedback__icon"> <mt-icon name="regular-file-text" size="32px" ></mt-icon> </div> <p class="payone-feedback__desc"> {{ $t('payone-payment.supportModal.documentation.description') }} </p> </div> <mt-button :disabled="false" variant="primary" :square="false" :block="false" :isLoading="false" link="https://docs.payone.com/display/public/INT/Shopware+6+Plugin" > {{ $t('payone-payment.supportModal.documentation.button') }} </mt-button> </div> <div class="payone-feedback__col"> <div class="payone-feedback__text"> <div class="payone-feedback__icon"> <mt-icon name="regular-headset" size="32px" ></mt-icon> </div> <p class="payone-feedback__desc"> {{ $t('payone-payment.supportModal.support.description') }} </p> </div> <mt-button :disabled="false" variant="primary" :square="false" :block="false" :isLoading="false" link="mailto:tech.support@payone.com" > {{ $t('payone-payment.supportModal.support.button') }} </mt-button> </div> <div class="payone-feedback__col"> <div class="payone-feedback__text"> <div class="payone-feedback__icon"> <mt-icon name="regular-code" size="32px" ></mt-icon> </div> <p class="payone-feedback__desc"> {{ $t('payone-payment.supportModal.repository.description') }} </p> </div> <mt-button :disabled="false" variant="primary" :square="false" :block="false" :isLoading="false" link="https://github.com/PAYONE-GmbH/shopware-6" > {{ $t('payone-payment.supportModal.repository.button') }} </mt-button> </div> <div class="payone-feedback__col"> <div class="payone-feedback__text"> <div class="payone-feedback__icon"> <mt-icon name="regular-fingerprint" size="32px" ></mt-icon> </div> <p class="payone-feedback__desc"> {{ $t('payone-payment.supportModal.testdata.description') }} </p> </div> <mt-button :disabled="false" variant="primary" :square="false" :block="false" :isLoading="false" link="https://www.payone.com/DE-de/kampagne/ecom-testaccount" > {{ $t('payone-payment.supportModal.testdata.button') }} </mt-button> </div> </sw-container> </sw-modal> <sw-card-view> <payone-payment-settings class="payone-config__wrapper" ref="systemConfig" sales-channel-switchable inherit domain="PayonePayment.settings" > <template #beforeElements="{card, config}"> <div v-if="card.setShowFields !== undefined" class="payone-config__collapsible-container" v-bind:class="{'collapsed': !card.showFields}" > <a class="payone-config__collapsible-handle" @click="card.setShowFields(!card.showFields)" > <mt-icon size="16px" v-if="!card.showFields" name="regular-chevron-down-xxs" class="payone-config__collapsible-handle-open" ></mt-icon> <mt-icon size="16px" v-if="card.showFields" name="regular-chevron-up-xxs" class="payone-config__collapsible-handle-close" ></mt-icon> </a> </div> <mt-banner v-if="card.showFields && card.name === 'payment_apple_pay' && !isApplePayCertConfigured" variant="info" appearance="default" :showIcon="true" :closable="false" > <span v-html="$t('payone-payment.applePay.cert.notification')" ></span> </mt-banner> </template> </payone-payment-settings> </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Mixin:l}=Shopware,r={template:c,mixins:[l.getByName("notification"),l.getByName("sw-inline-snippet")],inject:["PayonePaymentSettingsService","acl"],data(){return{isLoading:!1,isTesting:!1,isSaveSuccessful:!1,isTestSuccessful:!1,isApplePayCertConfigured:!0,isSupportModalOpen:!1,stateMachineTransitionActions:[],displayStatusMapping:{}}},created(){this.createdComponent()},metaInfo(){return{title:this.$createTitle()}},methods:{createdComponent(){this.PayonePaymentSettingsService.hasApplePayCert().then(e=>{this.isApplePayCertConfigured=e})},saveFinish(){this.isSaveSuccessful=!1},testFinish(){this.isTestSuccessful=!1},getConfigValue(e){const t=this.$refs.systemConfig.actualConfigData,a=t.null,s=this.$refs.systemConfig.currentSalesChannelId;return s===null?t.null[`PayonePayment.settings.${e}`]:t[s][`PayonePayment.settings.${e}`]||a[`PayonePayment.settings.${e}`]},getPaymentConfigValue(e,t){let a=e.charAt(0).toUpperCase()+e.slice(1);return this.getConfigValue(t+a)||this.getConfigValue(e)},onSave(){this.isSaveSuccessful=!1,this.isLoading=!0,this.$refs.systemConfig.saveAll().then(e=>{this.handleRatepayProfileUpdates(e),this.isSaveSuccessful=!0}).finally(()=>{this.isLoading=!1})},onTest(){this.isTesting=!0,this.isTestSuccessful=!1;let e={};this.$refs.systemConfig.config.forEach(t=>{const a=t.name.match(/^payment_(.+)$/),s=a?a[1]:null;s&&(e[s]={merchantId:this.getPaymentConfigValue("merchantId",s),accountId:this.getPaymentConfigValue("accountId",s),portalId:this.getPaymentConfigValue("portalId",s),portalKey:this.getPaymentConfigValue("portalKey",s)})}),this.PayonePaymentSettingsService.validateApiCredentials(e).then(t=>{const a=t.testCount,s=t.credentialsValid,n=t.errors;if(s)this.createNotificationSuccess({title:this.$t("payone-payment.settingsForm.titleSuccess"),message:a>0?this.$t("payone-payment.settingsForm.messageTestSuccess"):this.$t("payone-payment.settingsForm.messageTestNoTestedPayments")}),this.isTestSuccessful=!0;else for(let i in n)if(n.hasOwnProperty(i)){this.createNotificationError({title:this.$t("payone-payment.settingsForm.titleError"),message:this.$t("payone-payment.settingsForm.messageTestError."+i)});let o=n[i];typeof o=="string"&&this.createNotificationError({title:this.$t("payone-payment.settingsForm.titleError"),message:o})}}).catch(t=>{this.createNotificationError({title:this.$t("payone-payment.settingsForm.titleError"),message:this.$t("payone-payment.settingsForm.messageTestError.general")})}).finally(()=>{this.isTesting=!1})},handleRatepayProfileUpdates(e){const t=this.$refs.systemConfig.currentSalesChannelId;if(e.payoneRatepayProfilesUpdateResult&&e.payoneRatepayProfilesUpdateResult[t]){const a=e.payoneRatepayProfilesUpdateResult[t];this.$root.$emit("payone-ratepay-profiles-update-result",a),Array.isArray(a.errors)||this.createNotificationError({title:this.$t("payone-payment.settingsForm.titleError"),message:this.$t("payone-payment.settingsForm.messageSaveError.ratepayProfilesUpdateFailed")})}}}};export{r as default};
//# sourceMappingURL=index-BbyBawW7.js.map
