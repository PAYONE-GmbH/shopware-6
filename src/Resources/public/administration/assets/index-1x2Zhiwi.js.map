{"version":3,"file":"index-1x2Zhiwi.js","sources":["../../../app/administration/src/module/sw-order/component/payone-payment-management/payone-payment-management.html.twig","../../../app/administration/src/module/sw-order/component/payone-payment-management/index.js"],"sourcesContent":["{% block payone_payment_management %}\n    <div class=\"payone-payment-management\">\n        <template v-for=\"(transaction, index) in payoneTransactions\">\n            <mt-card\n                class=\"payone-payment-management-card\"\n                position-identifier=\"payone-payment-management-card\"\n                :title=\"index === 0 ? $t('sw-order.payone-payment.general.cardTitle') : ''\"\n            >\n                <sw-container columns=\"1fr 1fr\">\n                    <sw-container>\n                        <sw-description-list>\n                            <dt>\n                                {{ $t('sw-order.payone-payment.paymentMethod') }}\n                            </dt>\n\n                            <dd class=\"sw-order-base__label-sales-channel\">\n                                {{ transaction.paymentMethod.translated.distinguishableName }}\n                            </dd>\n\n                            <template v-if=\"getPayoneCardType(transaction)\">\n                                <dt>\n                                    {{ $t('sw-order.payone-payment.creditCard.cardTypeLabel') }}\n                                </dt>\n\n                                <dd class=\"sw-order-base__label-sales-channel\">\n                                    {{ getPayoneCardType(transaction) }}\n                                </dd>\n                            </template>\n\n                            <dt>\n                                {{ $t('sw-order.payone-payment.txid') }}\n                            </dt>\n\n                            <dd class=\"sw-order-base__label-sales-channel\">\n                                {{ transaction.extensions.payonePaymentOrderTransactionData.transactionId }}\n                            </dd>\n\n                            <dt>\n                                {{ $t('sw-order.payone-payment.sequenceNumber.label') }}\n                            </dt>\n\n                            <dd class=\"sw-order-base__label-sales-channel\">\n                                <span\n                                    v-if=\"transaction.extensions.payonePaymentOrderTransactionData.sequenceNumber == -1\"\n                                >\n                                    {{ $t('sw-order.payone-payment.sequenceNumber.empty') }}\n                                </span>\n\n                                <span v-else>\n                                    {{ transaction.extensions.payonePaymentOrderTransactionData.sequenceNumber }}\n                                </span>\n                            </dd>\n\n                            <dt>\n                                {{ $t('sw-order.payone-payment.transactionState') }}\n                            </dt>\n\n                            <dd\n                                class=\"sw-order-base__label-sales-channel\"\n                                v-if=\"isActiveTransaction(transaction)\"\n                            >\n                                {{ transaction.extensions.payonePaymentOrderTransactionData.transactionState }}\n                            </dd>\n\n                            <dd\n                                class=\"sw-order-base__label-sales-channel\"\n                                v-else\n                            >\n                                {{ $t('sw-order.payone-payment.transactionCancelled') }}\n                            </dd>\n                        </sw-description-list>\n                    </sw-container>\n\n                    <sw-container\n                        gap=\"30px\"\n                        v-if=\"acl.can('Payone.payone_order_management') && isActiveTransaction(transaction)\"\n                    >\n                        <payone-capture-button\n                            :order=\"order\"\n                            :transaction=\"transaction\"\n                            v-on:reload=\"reloadEntityData\"\n                        ></payone-capture-button>\n\n                        <payone-refund-button\n                            :order=\"order\"\n                            :transaction=\"transaction\"\n                            v-on:reload=\"reloadEntityData\"\n                        ></payone-refund-button>\n                    </sw-container>\n                </sw-container>\n\n                <sw-container\n                    v-if=\"acl.can('payone_payment_notification_forward:read') && hasNotificationForwards(transaction)\"\n                    gap=\"10px\"\n                    class=\"payone-payment-management-notification-forwards\"\n                >\n                    <b>\n                        {{ $t('payonePayment.notificationTarget.list.title') }}\n                    </b>\n\n                    <sw-data-grid\n                        :dataSource=\"notificationForwards\"\n                        :selectable=\"false\"\n                        :isFullpage=\"false\"\n                        :showSelection=\"false\"\n                        :compactMode=\"true\"\n                        :showActions=\"true\"\n                        :allowInlineEdit=\"false\"\n                        :columns=\"notificationTargetColumns\"\n                        :plainAppearance=\"true\"\n                        :showHeader=\"false\"\n                        table\n                    >\n                        <template #column-updatedAt=\"{ item }\">\n                            {{ dateFilter(item.updatedAt, { hour: '2-digit', minute: '2-digit' }) }}\n                        </template>\n\n                        <template #actions=\"{ item }\">\n                            <sw-context-menu-item\n                                v-if=\"acl.can('payone_webhook_resend')\"\n                                @click=\"requeue(item, transaction)\"\n                            >\n                                {{ $t('payonePayment.notificationTarget.actions.requeue') }}\n                            </sw-context-menu-item>\n                        </template>\n                    </sw-data-grid>\n                </sw-container>\n            </mt-card>\n        </template>\n    </div>\n{% endblock %}","import template from './payone-payment-management.html.twig';\nimport './payone-payment-management.scss';\n\nconst {Mixin, Filter} = Shopware;\nconst {Criteria} = Shopware.Data;\n\nexport default {\n    template,\n\n    inject: ['acl', 'PayonePaymentService', 'repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    props: {\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            notificationForwards: null\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        payoneTransactions: function () {\n            return this.order.transactions.filter(transaction => this.isPayoneTransaction(transaction)).sort((a, b) => { // newest transaction first\n                if (a.createdAt < b.createdAt) {\n                    return 1;\n                } else if (a.createdAt > b.createdAt) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n        },\n\n        notificationForwardRepository() {\n            return this.repositoryFactory.create('payone_payment_notification_forward');\n        },\n\n        notificationTargetColumns() {\n            return [{\n                property: 'txaction',\n                type: 'text',\n                width: '100px'\n            }, {\n                property: 'notificationTarget.url',\n                type: 'text',\n            }, {\n                property: 'response',\n                width: '100px'\n            }, {\n                property: 'updatedAt',\n                align: 'right',\n                type: 'date'\n            }];\n        },\n    },\n\n    methods: {\n        isPayoneTransaction(transaction) {\n            if (!transaction.extensions || !transaction.extensions.payonePaymentOrderTransactionData || !transaction.extensions.payonePaymentOrderTransactionData.transactionId) {\n                return false;\n            }\n\n            return transaction.extensions.payonePaymentOrderTransactionData.transactionId;\n        },\n\n        isActiveTransaction(transaction) {\n            return transaction.stateMachineState.technicalName !== 'cancelled';\n        },\n\n        hasNotificationForwards(transaction) {\n            if (this.notificationForwards === null) {\n                this.getNotificationForwards(transaction);\n                return false;\n            }\n\n            return this.notificationForwards.length > 0;\n        },\n\n        getNotificationForwards(transaction) {\n            const criteria = new Criteria();\n            criteria.addAssociation('notificationTarget');\n            criteria.addSorting(Criteria.sort('updatedAt', 'DESC', true));\n            criteria.addFilter(Criteria.equals('transactionId', transaction.id));\n            criteria.setLimit(500);\n\n            return this.notificationForwardRepository.search(criteria, Shopware.Context.api)\n                .then((searchResult) => {\n                    this.notificationForwards = searchResult;\n                });\n        },\n\n        requeue(notificationForward, transaction) {\n            const request = {\n                notificationForwardId: notificationForward.id\n            };\n\n            this.PayonePaymentService.requeueNotificationForward(request).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$t('payonePayment.notificationTarget.actions.requeue'),\n                    message: this.$t('payonePayment.notificationTarget.messages.success')\n                });\n\n                this.getNotificationForwards(transaction);\n            }).catch((error) => {\n                this.createNotificationError({\n                    title: this.$t('payonePayment.notificationTarget.actions.requeue'),\n                    message: error.message\n                });\n            }).finally(() => {\n                this.$nextTick().then(() => {\n                    this.$emit('reload')\n                });\n            });\n        },\n\n        reloadEntityData() {\n            this.$emit('reload-entity-data');\n        },\n\n        getPayoneCardType(transaction) {\n            let cardType = transaction.extensions.payonePaymentOrderTransactionData?.additionalData?.card_type;\n\n            return cardType ? this.$t('sw-order.payone-payment.creditCard.cardTypes.' + cardType) : null;\n        },\n    }\n};\n"],"names":["template","Mixin","Filter","Criteria","index","transaction","a","b","criteria","searchResult","notificationForward","request","error","_a","_b","cardType"],"mappings":"AAAA,MAAAA,EAAe,0gGCGT,CAAC,MAAAC,EAAO,OAAAC,CAAM,EAAI,SAClB,CAAC,SAAAC,CAAQ,EAAI,SAAS,KAE5BC,EAAe,CACX,SAAAJ,EAEA,OAAQ,CAAC,MAAO,uBAAwB,mBAAmB,EAE3D,OAAQ,CACJC,EAAM,UAAU,cAAc,CACtC,EAEI,MAAO,CACH,MAAO,CACH,KAAM,OACN,SAAU,EACtB,CACA,EAEI,MAAO,CACH,MAAO,CACH,qBAAsB,IAClC,CACA,EAEI,SAAU,CACN,YAAa,CACT,OAAOC,EAAO,UAAU,MAAM,CAC1C,EAEQ,mBAAoB,UAAY,CAC5B,OAAO,KAAK,MAAM,aAAa,OAAOG,GAAe,KAAK,oBAAoBA,CAAW,CAAC,EAAE,KAAK,CAACC,EAAGC,IAC7FD,EAAE,UAAYC,EAAE,UACT,EACAD,EAAE,UAAYC,EAAE,UAChB,GAEA,CAEd,CACb,EAEQ,+BAAgC,CAC5B,OAAO,KAAK,kBAAkB,OAAO,qCAAqC,CACtF,EAEQ,2BAA4B,CACxB,MAAO,CAAC,CACJ,SAAU,WACV,KAAM,OACN,MAAO,OACvB,EAAe,CACC,SAAU,yBACV,KAAM,MACtB,EAAe,CACC,SAAU,WACV,MAAO,OACvB,EAAe,CACC,SAAU,YACV,MAAO,QACP,KAAM,MACtB,CAAa,CACb,CACA,EAEI,QAAS,CACL,oBAAoBF,EAAa,CAC7B,MAAI,CAACA,EAAY,YAAc,CAACA,EAAY,WAAW,mCAAqC,CAACA,EAAY,WAAW,kCAAkC,cAC3I,GAGJA,EAAY,WAAW,kCAAkC,aAC5E,EAEQ,oBAAoBA,EAAa,CAC7B,OAAOA,EAAY,kBAAkB,gBAAkB,WACnE,EAEQ,wBAAwBA,EAAa,CACjC,OAAI,KAAK,uBAAyB,MAC9B,KAAK,wBAAwBA,CAAW,EACjC,IAGJ,KAAK,qBAAqB,OAAS,CACtD,EAEQ,wBAAwBA,EAAa,CACjC,MAAMG,EAAW,IAAIL,EACrB,OAAAK,EAAS,eAAe,oBAAoB,EAC5CA,EAAS,WAAWL,EAAS,KAAK,YAAa,OAAQ,EAAI,CAAC,EAC5DK,EAAS,UAAUL,EAAS,OAAO,gBAAiBE,EAAY,EAAE,CAAC,EACnEG,EAAS,SAAS,GAAG,EAEd,KAAK,8BAA8B,OAAOA,EAAU,SAAS,QAAQ,GAAG,EAC1E,KAAMC,GAAiB,CACpB,KAAK,qBAAuBA,CAChD,CAAiB,CACjB,EAEQ,QAAQC,EAAqBL,EAAa,CACtC,MAAMM,EAAU,CACZ,sBAAuBD,EAAoB,EAC3D,EAEY,KAAK,qBAAqB,2BAA2BC,CAAO,EAAE,KAAK,IAAM,CACrE,KAAK,0BAA0B,CAC3B,MAAO,KAAK,GAAG,kDAAkD,EACjE,QAAS,KAAK,GAAG,mDAAmD,CACxF,CAAiB,EAED,KAAK,wBAAwBN,CAAW,CACxD,CAAa,EAAE,MAAOO,GAAU,CAChB,KAAK,wBAAwB,CACzB,MAAO,KAAK,GAAG,kDAAkD,EACjE,QAASA,EAAM,OACnC,CAAiB,CACjB,CAAa,EAAE,QAAQ,IAAM,CACb,KAAK,YAAY,KAAK,IAAM,CACxB,KAAK,MAAM,QAAQ,CACvC,CAAiB,CACjB,CAAa,CACb,EAEQ,kBAAmB,CACf,KAAK,MAAM,oBAAoB,CAC3C,EAEQ,kBAAkBP,EAAa,CDnIvC,IAAAQ,EAAAC,ECoIY,IAAIC,GAAWD,GAAAD,EAAAR,EAAY,WAAW,oCAAvB,YAAAQ,EAA0D,iBAA1D,YAAAC,EAA0E,UAEzF,OAAOC,EAAW,KAAK,GAAG,gDAAkDA,CAAQ,EAAI,IACpG,CACA,CACA"}