{"version":3,"file":"index-CPA72YU3.js","sources":["../../../app/administration/src/module/sw-order/component/payone-capture-button/payone-capture-button.html.twig","../../../app/administration/src/module/sw-order/component/payone-capture-button/index.js"],"sourcesContent":["{% block payone_payment_payment_details %}\n    <div class=\"payone-capture-button\">\n        <sw-container\n            v-tooltip=\"{message: $t('sw-order.payone-payment.capture.tooltips.impossible'), disabled: buttonEnabled}\"\n            :key=\"buttonEnabled\"\n        >\n            <mt-button\n                :disabled=\"!buttonEnabled\"\n                @click=\"openCaptureModal\"\n                variant=\"secondary\"\n                size=\"default\"\n            >\n                {{ $t('sw-order.payone-payment.capture.buttonTitle') }}\n            </mt-button>\n        </sw-container>\n\n        <sw-modal\n            v-if=\"showCaptureModal\"\n            @modal-close=\"closeCaptureModal\"\n            :title=\"$t(`sw-order.payone-payment.modal.capture.title`)\"\n            class=\"payone-payment-detail--capture-modal\"\n        >\n            <payone-order-items\n                :order=\"order\"\n                :items=\"items\"\n            ></payone-order-items>\n\n            <div class=\"payone-payment-detail--capture-modal--content\">\n                <sw-container\n                    columns=\"1fr 1fr\"\n                    gap=\"0 32px\"\n                >\n                    <mt-text-field\n                        :disabled=\"true\"\n                        :label=\"$t('sw-order.payone-payment.modal.orderAmount')\"\n                        :model-value=\"currencyFilter(transaction.amount.totalPrice, order.currency.shortName)\"\n                    ></mt-text-field>\n\n                    <mt-text-field\n                        :disabled=\"true\"\n                        :label=\"$t('sw-order.payone-payment.modal.capture.captured')\"\n                        :model-value=\"currencyFilter(capturedAmount, order.currency.shortName)\"\n                    ></mt-text-field>\n\n                    <mt-text-field\n                        :disabled=\"true\"\n                        :label=\"$t('sw-order.payone-payment.modal.remainingAmount')\"\n                        :model-value=\"currencyFilter(remainingAmount, order.currency.shortName)\"\n                    ></mt-text-field>\n\n                    <mt-number-field\n                        required=\"required\"\n                        numberType=\"float\"\n                        :digits=\"decimalPrecision\"\n                        :label=\"$t('sw-order.payone-payment.modal.capture.amount')\"\n                        v-model=\"captureAmount\"\n                        :min=\"0\"\n                        :max=\"remainingAmount\"\n                    ></mt-number-field>\n                </sw-container>\n            </div>\n\n            <template #modal-footer>\n                <mt-button\n                    :disabled=\"isLoading\"\n                    @click=\"closeCaptureModal\"\n                    variant=\"secondary\"\n                >\n                    {{ $t('sw-order.payone-payment.modal.close') }}\n                </mt-button>\n\n                <sw-button-process\n                    :isLoading=\"isLoading\"\n                    :processSuccess=\"isCaptureSuccessful\"\n                    @process-finish=\"onCaptureFinished()\"\n                    :disabled=\"isLoading || captureAmount <= 0\"\n                    variant=\"primary\"\n                    @click=\"captureOrder\"\n                >\n                    {{ $t('sw-order.payone-payment.modal.capture.submit') }}\n                </sw-button-process>\n\n                <sw-button-process\n                    :isLoading=\"isLoading\"\n                    :processSuccess=\"isCaptureSuccessful\"\n                    @process-finish=\"onCaptureFinished()\"\n                    :disabled=\"isLoading || remainingAmount <= 0\"\n                    variant=\"primary\"\n                    @click=\"captureFullOrder\"\n                >\n                    {{ $t('sw-order.payone-payment.modal.capture.fullSubmit') }}\n                </sw-button-process>\n            </template>\n        </sw-modal>\n    </div>\n{% endblock %}","import template from './payone-capture-button.html.twig';\nimport './payone-capture-button.scss';\n\nconst {Mixin, Filter} = Shopware;\n\nexport default {\n    template,\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    inject: ['PayonePaymentService'],\n\n    props: {\n        order: {\n            type: Object,\n            required: true\n        },\n        transaction: {\n            type: Object,\n            required: true\n        }\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            hasError: false,\n            showCaptureModal: false,\n            isCaptureSuccessful: false,\n            captureAmount: 0.0,\n            includeShippingCosts: false,\n            items: [],\n        };\n    },\n\n    computed: {\n        currencyFilter() {\n            return Filter.getByName('currency');\n        },\n\n        payoneCurrencyFilter() {\n            return Filter.getByName('payone_currency');\n        },\n\n        orderTotalPrice() {\n            return this.transaction.amount.totalPrice;\n        },\n\n        decimalPrecision() {\n            if (!this.order || !this.order.currency) {\n                return 2;\n            }\n            if (this.order.currency.decimalPrecision) {\n                return this.order.currency.decimalPrecision;\n            }\n            if (this.order.currency.itemRounding) {\n                return this.order.currency.itemRounding.decimals;\n            }\n        },\n\n        capturedAmount() {\n            return this.toFixedPrecision((this.transaction?.extensions?.payonePaymentOrderTransactionData?.capturedAmount ?? 0) / 100);\n        },\n\n        remainingAmount() {\n            return this.toFixedPrecision(this.orderTotalPrice - this.capturedAmount);\n        },\n\n        buttonEnabled() {\n            if (!this.transaction?.extensions?.payonePaymentOrderTransactionData) {\n                return false;\n            }\n\n            return this.remainingAmount > 0 || this.transaction.extensions.payonePaymentOrderTransactionData.allowCapture;\n        },\n\n        selectedItems() {\n            return this.items.filter(item => item.selected && item.quantity > 0);\n        },\n\n        hasRemainingShippingCosts() {\n            if (this.order.shippingCosts.totalPrice <= 0) {\n                return false;\n            }\n\n            return this.toFixedPrecision(this.capturedAmount + this.order.shippingCosts.totalPrice) <= this.orderTotalPrice;\n        }\n    },\n\n    methods: {\n        toFixedPrecision(value) {\n            return Math.round(value * (10 ** this.decimalPrecision)) / (10 ** this.decimalPrecision);\n        },\n\n        calculateActionAmount() {\n            let amount = 0;\n\n            this.selectedItems.forEach((selection) => {\n                amount += selection.unit_price * selection.quantity;\n            });\n\n            this.captureAmount = this.toFixedPrecision(amount > this.remainingAmount ? this.remainingAmount : amount);\n        },\n\n        openCaptureModal() {\n            this.showCaptureModal = true;\n            this.isCaptureSuccessful = false;\n            this.initItems();\n        },\n\n        initItems() {\n            this.items = this.order.lineItems.map((orderItem) => {\n                const qty = orderItem.quantity - (orderItem.customFields?.payone_captured_quantity ?? 0);\n\n                return {\n                    id: orderItem.id,\n                    quantity: qty,\n                    maxQuantity: qty,\n                    unit_price: orderItem.unitPrice,\n                    selected: false,\n                    product: orderItem.label,\n                    orderItem: orderItem,\n                    disabled: qty <= 0,\n                };\n            });\n\n            if (this.order.shippingCosts.totalPrice > 0) {\n                this.items.push({\n                    id: 'shipping',\n                    quantity: 1,\n                    maxQuantity: 1,\n                    unit_price: this.order.shippingCosts.totalPrice,\n                    selected: false,\n                    disabled: false,\n                    product: this.$t('sw-order.payone-payment.modal.shippingCosts'),\n                });\n            }\n        },\n\n        closeCaptureModal() {\n            this.showCaptureModal = false;\n        },\n\n        onCaptureFinished() {\n            this.isCaptureSuccessful = false;\n        },\n\n        captureOrder() {\n            const request = {\n                orderTransactionId: this.transaction.id,\n                payone_order_id: this.transaction.extensions.payonePaymentOrderTransactionData.transactionId,\n                salesChannel: this.order.salesChannel,\n                amount: this.captureAmount,\n                orderLines: [],\n                complete: this.captureAmount === this.remainingAmount,\n                includeShippingCosts: false\n            };\n\n            this.isLoading = true;\n\n            this.selectedItems.forEach((selection) => {\n                if (selection.id === 'shipping') {\n                    request.includeShippingCosts = true;\n                } else {\n                    const orderLineItem = this.order.lineItems.find(lineItem => lineItem.id === selection.id);\n                    if (orderLineItem) {\n                        const copy = {...orderLineItem};\n\n                        copy.quantity = selection.quantity;\n                        copy.total_amount = copy.unit_price * copy.quantity;\n                        copy.total_tax_amount = copy.total_amount - (copy.total_amount / (1 + (copy.tax_rate / 100)));\n\n                        request.orderLines.push(copy);\n                    }\n                }\n            });\n\n            if (this.remainingAmount < request.amount) {\n                request.amount = this.remainingAmount;\n            }\n\n            this.executeCapture(request)\n        },\n\n        captureFullOrder() {\n            const request = {\n                orderTransactionId: this.transaction.id,\n                payone_order_id: this.transaction.extensions.payonePaymentOrderTransactionData.transactionId,\n                salesChannel: this.order.salesChannel,\n                amount: this.remainingAmount,\n                orderLines: [],\n                complete: true,\n                includeShippingCosts: this.hasRemainingShippingCosts\n            };\n\n            this.isLoading = true;\n\n            request.orderLines = this.order.lineItems.map((orderItem) => {\n                return {\n                    id: orderItem.id,\n                    quantity: orderItem.quantity - (orderItem.customFields?.payone_captured_quantity ?? 0),\n                    unit_price: orderItem.unitPrice,\n                    selected: false\n                };\n            });\n\n            this.executeCapture(request);\n        },\n\n        executeCapture(request) {\n            this.PayonePaymentService.capturePayment(request).then(() => {\n                this.createNotificationSuccess({\n                    title: this.$t('sw-order.payone-payment.capture.successTitle'),\n                    message: this.$t('sw-order.payone-payment.capture.successMessage')\n                });\n\n                this.isCaptureSuccessful = true;\n            }).catch((error) => {\n                this.createNotificationError({\n                    title: this.$t('sw-order.payone-payment.capture.errorTitle'),\n                    message: error.message\n                });\n\n                this.isCaptureSuccessful = false;\n            }).finally(() => {\n                this.isLoading = false;\n                this.closeCaptureModal();\n\n                this.$nextTick().then(() => {\n                    this.$emit('reload')\n                });\n            });\n        },\n    },\n    watch: {\n        items: {\n            handler() {\n                this.calculateActionAmount();\n            },\n            deep: true,\n        }\n    }\n};\n"],"names":["template","Mixin","Filter","index","_a","_b","_c","item","value","amount","selection","orderItem","qty","request","orderLineItem","lineItem","copy","error"],"mappings":"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"}