const r=`{% block payone_ratepay_profile_configurations %} <div class="payone-ratepay-profile-configuration"> <template v-if="profileConfigurations.length > 0"> <h3> {{ $t('payone-payment.general.headlines.ratepayProfileConfigurations') }} </h3> <div class="payone-ratepay-profile-configuration--items"> <div v-for="profileConfiguration in profileConfigurations"> <p class="payone-ratepay-profile-configuration--headline"> {{ $t('payone-payment.general.label.shopId') }}:{{ profileConfiguration.shopId }} </p> {% block payone_ratepay_configuration_grid %} <sw-description-list grid="1fr 1fr"> <dt> {{ $t('payone-payment.general.label.currency') }} </dt> <dd> {{ profileConfiguration.shopCurrency }} </dd> <dt> {{ $t('payone-payment.general.label.invoiceCountry') }} </dt> <dd> {{ profileConfiguration.invoiceCountry }} </dd> <dt> {{ $t('payone-payment.general.label.shippingCountry') }} </dt> <dd> {{ profileConfiguration.shippingCountry }} </dd> <dt> {{ $t('payone-payment.general.label.minBasket') }} </dt> <dd> {{ profileConfiguration.minBasket }} </dd> <dt> {{ $t('payone-payment.general.label.maxBasket') }} </dt> <dd> {{ profileConfiguration.maxBasket }} </dd> </sw-description-list> {% endblock %} </div> </div> </template> <mt-banner variant="info" appearance="default" :showIcon="true" :closable="false" > <span v-html="$t('payone-payment.general.label.reloadConfigInfo')"></span> </mt-banner> </div> {% endblock %}`,s={template:r,inject:["PayonePaymentSettingsService"],props:{value:{type:Object,required:!1,default(){return{}}},name:{type:String,required:!0}},data(){return{isLoading:!1,configuration:this.value}},created(){this.createdComponent()},destroyed(){this.destroyedComponent()},computed:{profileConfigurations(){const t=this.name;let a=[];for(const e in this.configuration){let n="",i="";switch(t){case"PayonePayment.settings.ratepayDebitProfileConfigurations":n=this.configuration[e]["tx-limit-elv-min"],i=this.configuration[e]["tx-limit-elv-max"];break;case"PayonePayment.settings.ratepayInstallmentProfileConfigurations":n=this.configuration[e]["tx-limit-installment-min"],i=this.configuration[e]["tx-limit-installment-max"];break;case"PayonePayment.settings.ratepayInvoicingProfileConfigurations":n=this.configuration[e]["tx-limit-invoice-min"],i=this.configuration[e]["tx-limit-invoice-max"];break;default:return}const o={shopId:e,shopCurrency:this.configuration[e].currency,invoiceCountry:this.configuration[e]["country-code-billing"],shippingCountry:this.configuration[e]["country-code-delivery"],minBasket:n,maxBasket:i};a.push(o)}return a}},methods:{createdComponent(){Shopware.Utils.EventBus.on("payone-ratepay-profiles-update-result",this.onProfilesUpdateResult)},destroyedComponent(){Shopware.Utils.EventBus.off("payone-ratepay-profiles-update-result")},onProfilesUpdateResult(t){t.updates[this.name]&&(this.configuration=t.updates[this.name])}}};export{s as default};
//# sourceMappingURL=index-B2DuEd9h.js.map
