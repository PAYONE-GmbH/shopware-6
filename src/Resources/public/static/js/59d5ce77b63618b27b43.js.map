{"version":3,"file":"static/js/59d5ce77b63618b27b43.js","mappings":"uLAEA,GAAM,CAAEA,MAAAA,CAAK,CAAE,CAAGC,SAElB,MAAe,CACXC,SCLW,w7ODOXC,OAAQ,CAAC,oBAAoB,CAE7BC,OAAQ,CACJJ,EAAMK,SAAS,CAAC,gBACnB,CAEDC,UAAW,CACP,cAAe,SACfC,OAAQ,UACZ,EAEAC,MAAO,CACHC,qBAAsB,CAClBC,KAAMC,OACNC,SAAU,GACVC,QAAS,IACb,CACJ,EAEAC,OACI,MAAO,CACHC,mBAAoB,KACpBC,UAAW,GACXC,iBAAkB,GAClBC,eAAgB,EACpB,CACJ,EAEAC,WACI,MAAO,CACHC,MAAO,IAAI,CAACC,YAAY,CAAC,IAAI,CAACC,UAAU,CAC5C,CACJ,EAEAC,SAAU,CACNC,8BACI,OAAO,IAAI,CAACR,SAAS,EAAI,UAAI,CAACD,kBAAkB,EAGpDU,+BACI,OAAO,IAAI,CAACC,iBAAiB,CAACC,MAAM,CAAC,qCACzC,CACJ,EAEAC,MAAO,CACHnB,uBACI,IAAI,CAACoB,gBAAgB,EACzB,CACJ,EAEAC,UACI,IAAI,CAACD,gBAAgB,EACzB,EAEAE,QAAS,CACLF,mBACI,GAAI,IAAI,CAACpB,oBAAoB,CAAE,CAC3B,IAAI,CAACuB,cAAc,GACnB,MACJ,CAEA/B,SAASgC,KAAK,CAACC,MAAM,CAAC,kCACtB,IAAI,CAACnB,kBAAkB,CAAG,IAAI,CAACU,4BAA4B,CAACE,MAAM,CAAC1B,SAASkC,OAAO,CAACC,GAAG,CAC3F,EAEAJ,iBACI,IAAI,CAAChB,SAAS,CAAG,GAEjB,IAAI,CAACS,4BAA4B,CAACY,GAAG,CAAC,IAAI,CAAC5B,oBAAoB,CAAER,SAASkC,OAAO,CAACC,GAAG,EAAEE,IAAI,CAAC,IACxF,IAAI,CAACtB,SAAS,CAAG,GAEjB,IAAI,CAACD,kBAAkB,CAAGA,EAEvB,OAASA,EAAmBwB,SAAS,GAIpCxB,EAAmBwB,SAAS,CAACC,MAAM,EACnC,KAAI,CAACzB,kBAAkB,CAACwB,SAAS,CAAG,IAAG,EAE/C,EACJ,EAEAE,kBACI,CAA2C,IAAxC,IAAI,CAAC1B,kBAAkB,CAAC2B,WAAW,EAInC,MAAI,CAAC3B,kBAAkB,CAAC4B,QAAQ,GAAI,IAAI,CAAC5B,kBAAkB,CAAC6B,QAAQ,IAIvE,IAAI,CAACC,uBAAuB,CAAC,CACzBC,QAAS,IAAI,CAACC,GAAG,CACb,wEAER,GAEO,GACX,EAEAC,SACO,IAAI,CAACP,SAAS,KAIjB,IAAI,CAACzB,SAAS,CAAG,GAEjB,IAAI,CAACS,4BAA4B,CAACwB,IAAI,CAAC,IAAI,CAAClC,kBAAkB,CAAEd,SAASkC,OAAO,CAACC,GAAG,EAAEE,IAAI,CAAC,KAGvF,GAFA,IAAI,CAACtB,SAAS,CAAG,GACjB,IAAI,CAACC,gBAAgB,CAAG,GACpB,WAAI,CAACR,oBAAoB,CAAW,CACpC,IAAI,CAACyC,OAAO,CAACC,IAAI,CAAC,CAAEC,KAAM,oCAAqCC,OAAQ,CAAEC,GAAI,IAAI,CAACvC,kBAAkB,CAACuC,EAAE,CAAG,GAC1G,MACJ,CAEA,IAAI,CAACtB,cAAc,EACvB,GAAGuB,KAAK,CAAC,IAOL,MANA,IAAI,CAACvC,SAAS,CAAG,GACjB,IAAI,CAAC6B,uBAAuB,CAAC,CACzBC,QAAS,IAAI,CAACC,GAAG,CACb,wEAER,GACMS,CACV,GACJ,EAEAC,WACI,IAAI,CAACP,OAAO,CAACC,IAAI,CAAC,CAAEC,KAAM,iCAAkC,EAChE,CACJ,CACJ,C","sources":["webpack://administration/../../../../../../custom/plugins/PayonePayment/src/Resources/app/administration/src/module/payone-notification-target/page/payone-notification-target-detail/index.js","webpack://administration/../../../../../../custom/plugins/PayonePayment/src/Resources/app/administration/src/module/payone-notification-target/page/payone-notification-target-detail/payone-notification-target-detail.html.twig"],"sourcesContent":["import template from './payone-notification-target-detail.html.twig';\n\nconst { Mixin } = Shopware;\n\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    mixins: [\n        Mixin.getByName('notification'),\n    ],\n\n    shortcuts: {\n        'SYSTEMKEY+S': 'onSave',\n        ESCAPE: 'onCancel'\n    },\n\n    props: {\n        notificationTargetId: {\n            type: String,\n            required: false,\n            default: null\n        }\n    },\n\n    data() {\n        return {\n            notificationTarget: null,\n            isLoading: false,\n            isSaveSuccessful: false,\n            processSuccess: false,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(this.identifier)\n        };\n    },\n\n    computed: {\n        notificationTargetIsLoading() {\n            return this.isLoading || this.notificationTarget == null;\n        },\n\n        notificationTargetRepository() {\n            return this.repositoryFactory.create('payone_payment_notification_target');\n        }\n    },\n\n    watch: {\n        notificationTargetId() {\n            this.createdComponent();\n        }\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (this.notificationTargetId) {\n                this.loadEntityData();\n                return;\n            }\n\n            Shopware.State.commit('context/resetLanguageToDefault');\n            this.notificationTarget = this.notificationTargetRepository.create(Shopware.Context.api);\n        },\n\n        loadEntityData() {\n            this.isLoading = true;\n\n            this.notificationTargetRepository.get(this.notificationTargetId, Shopware.Context.api).then((notificationTarget) => {\n                this.isLoading = false;\n\n                this.notificationTarget = notificationTarget;\n\n                if(null === notificationTarget.txactions) {\n                    return;\n                }\n\n                if(!notificationTarget.txactions.length) {\n                    this.notificationTarget.txactions = null;\n                }\n            });\n        },\n\n        isInvalid() {\n            if(this.notificationTarget.isBasicAuth !== true ) {\n                return false;\n            }\n\n            if(this.notificationTarget.username && this.notificationTarget.password) {\n                return false;\n            }\n\n            this.createNotificationError({\n                message: this.$tc(\n                    'global.notification.notificationSaveErrorMessageRequiredFieldsInvalid'\n                )\n            });\n\n            return true;\n        },\n\n        onSave() {\n            if(this.isInvalid()) {\n                return;\n            }\n\n            this.isLoading = true;\n\n            this.notificationTargetRepository.save(this.notificationTarget, Shopware.Context.api).then(() => {\n                this.isLoading = false;\n                this.isSaveSuccessful = true;\n                if (this.notificationTargetId === null) {\n                    this.$router.push({ name: 'payone.notification.target.detail', params: { id: this.notificationTarget.id } });\n                    return;\n                }\n\n                this.loadEntityData();\n            }).catch((exception) => {\n                this.isLoading = false;\n                this.createNotificationError({\n                    message: this.$tc(\n                        'global.notification.notificationSaveErrorMessageRequiredFieldsInvalid'\n                    )\n                });\n                throw exception;\n            });\n        },\n\n        onCancel() {\n            this.$router.push({ name: 'payone.notification.target.list' });\n        }\n    }\n};\n","export default \"{% block payone_notification_target_detail %}\\n    <sw-page class=\\\"payone-notification-target-detail\\\">\\n\\n        {% block payone_notification_target_detail_header %}\\n            <template #smart-bar-header>\\n                <h2>{{ $tc('payonePayment.notificationTarget.detail.headline') }}</h2>\\n            </template>\\n        {% endblock %}\\n\\n        {% block payone_notification_target_detail_actions %}\\n            <template #smart-bar-actions>\\n\\n                {% block payone_notification_target_detail_actions_abort %}\\n                    <sw-button :disabled=\\\"notificationTargetIsLoading\\\" @click=\\\"onCancel\\\">\\n                        {{ $tc('payonePayment.notificationTarget.detail.label.buttonCancel') }}\\n                    </sw-button>\\n                {% endblock %}\\n\\n                {% block payone_notification_target_detail_actions_save %}\\n                    <sw-button-process\\n                        class=\\\"payone-notification-target-detail__save-action\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        v-model=\\\"isSaveSuccessful\\\"\\n                        :disabled=\\\"isLoading\\\"\\n                        variant=\\\"primary\\\"\\n                        :process-success=\\\"processSuccess\\\"\\n                        @click.prevent=\\\"onSave\\\">\\n                        {{ $tc('payonePayment.notificationTarget.detail.label.buttonSave') }}\\n                    </sw-button-process>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n        <template #content>\\n            {% block payone_notification_target_detail_content %}\\n                <sw-card-view>\\n\\n                    {% block payone_notification_target_detail_base_basic_info_card %}\\n                        <sw-card :position-identifier=\\\"payone-notification-target-detail-content\\\"\\n                                 :title=\\\"$tc('payonePayment.notificationTarget.detail.headline')\\\"\\n                                 :isLoading=\\\"notificationTargetIsLoading\\\">\\n                            <template v-if=\\\"!notificationTargetIsLoading\\\">\\n                                <sw-container class=\\\"payone-notification-target-detail__container\\\"\\n                                              columns=\\\"repeat(auto-fit, minmax(250px, 1fr))\\\"\\n                                              gap=\\\"0 30px\\\">\\n                                    <div class=\\\"payone-notification-target-detail__base-info-wrapper\\\">\\n\\n                                        {% block payone_notification_target_detail_base_info_field_url %}\\n                                            <sw-text-field\\n                                                      :label=\\\"$tc('payonePayment.notificationTarget.detail.label.url')\\\"\\n                                                      :placeholder=\\\"$tc('payonePayment.notificationTarget.detail.placeholder.url')\\\"\\n                                                      name=\\\"url\\\"\\n                                                      validation=\\\"required\\\"\\n                                                      required\\n                                                      v-model:value=\\\"notificationTarget.url\\\">\\n                                            </sw-text-field>\\n                                        {% endblock %}\\n\\n                                        {% block payone_notification_target_detail_base_info_field_is_basic_auth %}\\n                                            <sw-checkbox-field :label=\\\"$tc('payonePayment.notificationTarget.detail.label.isBasicAuth')\\\"\\n                                                      name=\\\"isBasicAuth\\\"\\n                                                      v-model:value=\\\"notificationTarget.isBasicAuth\\\">\\n                                            </sw-checkbox-field>\\n                                        {% endblock %}\\n\\n                                        {% block payone_notification_target_detail_base_info_field_is_basic_auth_fields %}\\n                                            <sw-text-field v-if=\\\"notificationTarget.isBasicAuth\\\"\\n                                                      :label=\\\"$tc('payonePayment.notificationTarget.detail.label.username')\\\"\\n                                                      :placeholder=\\\"$tc('payonePayment.notificationTarget.detail.placeholder.username')\\\"\\n                                                      name=\\\"username\\\"\\n                                                      required\\n                                                      v-model:value=\\\"notificationTarget.username\\\">\\n                                            </sw-text-field>\\n\\n                                            <sw-password-field v-if=\\\"notificationTarget.isBasicAuth\\\"\\n                                                      :label=\\\"$tc('payonePayment.notificationTarget.detail.label.password')\\\"\\n                                                      :placeholder=\\\"$tc('payonePayment.notificationTarget.detail.placeholder.password')\\\"\\n                                                      name=\\\"password\\\"\\n                                                      required\\n                                                      v-model:value=\\\"notificationTarget.password\\\">\\n                                            </sw-password-field>\\n                                        {% endblock %}\\n\\n                                        {% block payone_notification_target_detail_base_info_field_txactions %}\\n                                            <sw-multi-select\\n                                                :label=\\\"$tc('payonePayment.notificationTarget.detail.label.txactions')\\\"\\n                                                :options=\\\"[\\n                                                    { value: 'appointed', label: 'appointed' },\\n                                                    { value: 'capture', label: 'capture' },\\n                                                    { value: 'paid', label: 'paid' },\\n                                                    { value: 'underpaid', label: 'underpaid' },\\n                                                    { value: 'cancelation', label: 'cancelation' },\\n                                                    { value: 'refund', label: 'refund' },\\n                                                    { value: 'debit', label: 'debit' },\\n                                                    { value: 'transfer', label: 'transfer' },\\n                                                    { value: 'reminder', label: 'reminder' },\\n                                                    { value: 'vauthorization', label: 'vauthorization' },\\n                                                    { value: 'vsettlement', label: 'vsettlement' },\\n                                                    { value: 'invoice', label: 'invoice' },\\n                                                    { value: 'failed', label: 'failed' }\\n                                                ]\\\"\\n                                                v-model:value=\\\"notificationTarget.txactions\\\">\\n                                            </sw-multi-select>\\n                                        {% endblock %}\\n\\n                                    </div>\\n                                </sw-container>\\n                            </template>\\n                        </sw-card>\\n                    {% endblock %}\\n                </sw-card-view>\\n            {% endblock %}\\n        </template>\\n\\n    </sw-page>\\n{% endblock %}\\n\";"],"names":["Mixin","Shopware","template","inject","mixins","getByName","shortcuts","ESCAPE","props","notificationTargetId","type","String","required","default","data","notificationTarget","isLoading","isSaveSuccessful","processSuccess","metaInfo","title","$createTitle","identifier","computed","notificationTargetIsLoading","notificationTargetRepository","repositoryFactory","create","watch","createdComponent","created","methods","loadEntityData","State","commit","Context","api","get","then","txactions","length","isInvalid","isBasicAuth","username","password","createNotificationError","message","$tc","onSave","save","$router","push","name","params","id","catch","exception","onCancel"],"sourceRoot":""}