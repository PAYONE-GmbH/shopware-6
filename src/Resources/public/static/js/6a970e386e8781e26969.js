"use strict";(window["webpackJsonpPluginpayone-payment"]=window["webpackJsonpPluginpayone-payment"]||[]).push([[355],{355:function(t,n,e){e.r(n),e.d(n,{default:function(){return o}});let{Mixin:i,Data:{Criteria:a}}=Shopware;var o={template:'{% block payone_notification_target_list %}\n    <sw-page class="sw-review-list">\n\n        {% block payone_notification_target_list_smart_bar_header %}\n            <template #smart-bar-header>\n                {% block payone_notification_target_list_smart_bar_header_title %}\n                    <h2>\n\n                        {% block payone_notification_target_list_smart_bar_header_title_text %}\n                            {{ $tc(\'payonePayment.notificationTarget.list.title\') }}\n                        {% endblock %}\n\n                        {% block payone_notification_target_list_smart_bar_header_amount %}\n                            <span v-if="!isLoading" class="sw-page__smart-bar-amount">\n                                ({{ items.total }})\n                            </span>\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block payone_notification_target_list_actions %}\n            <template #smart-bar-actions>\n                {% block payone_notification_target_list_smart_bar_actions %}\n                    <sw-button\n                        :routerLink="{ name: \'payone.notification.target.create\' }"\n                        variant="primary"\n                        v-if="acl.can(\'payone_payment_notification_target:create\')"\n                    >\n                        {{ $tc(\'payonePayment.notificationTarget.list.buttonCreate\') }}\n                    </sw-button>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block payone_notification_target_list_content %}\n            <template #content>\n\n                {% block payone_notification_target_list_content_list %}\n                    <sw-entity-listing\n                        v-if="items"\n                        ref="payoneNotificationTargetGrid"\n                        detailRoute="payone.notification.target.detail"\n                        :limit="criteriaLimit"\n                        :repository="repository"\n                        :columns="notificationTargetColumns"\n                        :items="items"\n                        @column-sort="onSortColumn"\n                        :disableDataFetching="true"\n                        :sortBy="sortBy"\n                        :showSelection="false"\n                        :sortDirection="sortDirection"\n                        identifier="payone-notification-target-list"\n                        :allowInlineEdit="false"\n                        :allowBulkEdit="false"\n                        :allowColumnEdit="acl.can(\'payone_payment_notification_target:update\')"\n                        :allowEdit="acl.can(\'payone_payment_notification_target:update\')"\n                        :allowDelete="acl.can(\'payone_payment_notification_target:delete\')"\n                    >\n\n                        {% block payone_notification_target_list_grid_columns %}\n                            {% block payone_notification_target_list_grid_columns_url %}\n                                <template #column-url="{ item }">\n                                    <router-link :to="{ name: \'payone.notification.target.detail\', params: { id: item.id } }"\n                                                 v-if="acl.can(\'payone_payment_notification_target:update\')">\n                                        {{ item.url }}\n                                    </router-link>\n                                    <span v-else>{{ item.url }}</span>\n                                </template>\n                            {% endblock %}\n\n                            {% block payone_notification_target_list_grid_columns_is_basic_auth %}\n                                <template #column-isBasicAuth="{ item }">\n                                    <sw-icon v-if="item.isBasicAuth" name="regular-checkmark-xs" small class="is--active"></sw-icon>\n                                    <sw-icon v-else name="regular-times-s" small class="is--inactive"></sw-icon>\n                                </template>\n                            {% endblock %}\n\n                            {% block payone_notification_target_list_grid_columns_txactions %}\n                                <template #column-txactions="{ item }">\n                                    {{ renderTxactions(item.txactions) }}\n                                </template>\n                            {% endblock %}\n                        {% endblock %}\n                    </sw-entity-listing>\n                {% endblock %}\n\n                {% block payone_notification_target_list_empty_state %}\n                    <sw-empty-state v-if="!isLoading && !total"\n                                    icon="default-documentation-file"\n                                    :title="$tc(\'payonePayment.notificationTarget.list.empty\')">\n                    </sw-empty-state>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block payone_notification_target_list_sidebar %}\n            <template #sidebar>\n                <sw-sidebar>\n\n                    {% block payone_notification_target_list_sidebar_refresh %}\n                        <sw-sidebar-item\n                            icon="default-arrow-360-left"\n                            :title="$tc(\'sw-review.list.titleSidebarItemRefresh\')"\n                            @click="onRefresh">\n                        </sw-sidebar-item>\n                    {% endblock %}\n                </sw-sidebar>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory","acl"],mixins:[i.getByName("listing")],data(){return{isLoading:!1,items:null,sortBy:"createdAt",criteriaLimit:500,criteriaPage:1,limit:500}},metaInfo(){return{title:this.$createTitle()}},computed:{notificationTargetColumns(){return[{dataIndex:"url",property:"url",label:"payonePayment.notificationTarget.columns.url",primary:!0},{dataIndex:"isBasicAuth",property:"isBasicAuth",label:"payonePayment.notificationTarget.columns.isBasicAuth"},{property:"txactions",label:"payonePayment.notificationTarget.columns.txactions"}]},repository(){return this.repositoryFactory.create("payone_payment_notification_target")},criteria(){return new a(this.criteriaPage,this.criteriaLimit)}},created(){this.createdComponent()},methods:{renderTxactions(t){return null!==t&&t.length?t.join(", "):""},createdComponent(){this.getList()},getList(){this.isLoading=!0;let t={...Shopware.Context.api,inheritance:!0};return this.repository.search(this.criteria,t).then(t=>{this.total=t.total,this.items=t,this.isLoading=!1})},onDelete(t){this.$refs.listing.deleteItem(t),this.getList()}}}}}]);