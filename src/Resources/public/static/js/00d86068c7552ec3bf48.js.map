{"version":3,"file":"static/js/00d86068c7552ec3bf48.js","mappings":"uLAEA,GAAM,CAACA,SAAAA,CAAQ,CAAC,CAAGC,SAASC,IAAI,CAC1B,CAAEC,OAAAA,CAAM,CAAE,CAAGF,SAEnB,MAAe,CACXG,SCNW,0oFDQXC,OAAQ,CAAC,oBAAoB,CAE7BC,MAAO,CACHC,MAAO,CACHC,KAAMC,OACNC,SAAU,EACd,CACJ,EAEAC,OACI,MAAO,CACHC,YAAa,EAAE,CACfC,UAAW,GACXC,mBAAoB,IACxB,CACJ,EAEAC,SAAU,CACNC,uBACI,OAAO,IAAI,CAACC,iBAAiB,CAACC,MAAM,CAAC,6BACzC,EAEAC,cACI,OAAOhB,EAAOiB,SAAS,CAAC,QAC5B,EAEAC,aACI,OAAOlB,EAAOiB,SAAS,CAAC,OAC5B,EAEAE,oBACI,MAAO,CACH,CACIC,SAAU,gBACVC,MAAO,IAAI,CAACC,GAAG,CAAC,8DACpB,EACA,CACIF,SAAU,mBACVC,MAAO,IAAI,CAACC,GAAG,CAAC,iEACpB,EACA,CACIF,SAAU,iBACVC,MAAO,IAAI,CAACC,GAAG,CAAC,+DACpB,EACA,CACIF,SAAU,eACVC,MAAO,IAAI,CAACC,GAAG,CAAC,6DACpB,EACA,CACIF,SAAU,kBACVC,MAAO,IAAI,CAACC,GAAG,CAAC,gEACpB,EACH,EAGLC,kBACI,MAAO,CACH,CAACH,SAAU,MAAOC,MAAO,IAAI,CAACC,GAAG,CAAC,oDAAoD,EACtF,CAACF,SAAU,QAASC,MAAO,IAAI,CAACC,GAAG,CAAC,sDAAsD,EAC7F,CAET,EAEAE,UACI,IAAI,CAACC,gBAAgB,EACzB,EAEAC,QAAS,CACLD,mBACI,IAAI,CAACE,cAAc,EACvB,EAEAC,oBACI,IAAI,CAACD,cAAc,EACvB,EAEAA,iBACI,IAAME,EAAW,IAAIhC,EAKrB,OAJAgC,EAASC,SAAS,CAACjC,EAASkC,MAAM,CAAC,UAAW,IAAI,CAAC3B,KAAK,CAAC4B,EAAE,GAC3DH,EAASI,UAAU,CAACpC,EAASqC,IAAI,CAAC,kBAAmB,MAAO,KAE5D,IAAI,CAACxB,SAAS,CAAG,GACV,IAAI,CAACG,oBAAoB,CAACsB,MAAM,CAACN,EAAU/B,SAASsC,OAAO,CAACC,GAAG,EAAEC,IAAI,CAAC,IACzE,IAAI,CAAC7B,WAAW,CAAG8B,EACnB,IAAI,CAAC7B,SAAS,CAAG,EACrB,EACJ,EAEA8B,YAAYC,CAAU,EAClB,IAAI,CAAC9B,kBAAkB,CAAG8B,EAAWC,cAAc,EAGvDC,sBACI,IAAI,CAAChC,kBAAkB,CAAG,IAC9B,EAEAiC,iBAAiBC,CAAM,EACnB,IAAMrC,EAAO,EAAE,CAEf,IAAK,IAAMsC,KAAOD,EACdrC,EAAKuC,IAAI,CAAC,CAACD,IAAAA,EAAKE,MAAOH,CAAM,CAACC,EAAI,GAKtC,OAFAtC,EAAK0B,IAAI,CAAC,CAACe,EAAGC,IAAMD,EAAEH,GAAG,CAACK,aAAa,CAACD,EAAEJ,GAAG,GAEtCtC,CACX,EAEA4C,cAAcP,CAAM,CAAEQ,CAAU,CAAErB,CAAE,EAChC,IAAMsB,EAAOC,SAASC,aAAa,CAAC,IACpCF,CAAAA,EAAKG,IAAI,CAAG,iCAAmCC,mBAAmBC,KAAKC,SAAS,CAACf,EAAQ,KAAM,IAC/FS,EAAKO,QAAQ,CAAG,CAAC,OAAO,EAAER,EAAW,CAAC,EAAErB,EAAG,IAAI,CAAC,CAChDsB,EAAKQ,aAAa,CAAC,IAAIC,WAAW,UAClCT,EAAKU,MAAM,EACf,CACJ,CACJ,C","sources":["webpack://administration/../../../../../../custom/plugins/PayonePayment/src/Resources/app/administration/src/module/sw-order/component/payone-payment-webhook-log/index.js","webpack://administration/../../../../../../custom/plugins/PayonePayment/src/Resources/app/administration/src/module/sw-order/component/payone-payment-webhook-log/payone-payment-webhook-log.html.twig"],"sourcesContent":["import template from './payone-payment-webhook-log.html.twig';\n\nconst {Criteria} = Shopware.Data;\nconst { Filter } = Shopware;\n\nexport default {\n    template,\n\n    inject: ['repositoryFactory'],\n\n    props: {\n        order: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            webhookLogs: [],\n            isLoading: false,\n            showWebhookDetails: null,\n        };\n    },\n\n    computed: {\n        webhookLogRepository() {\n            return this.repositoryFactory.create('payone_payment_webhook_log');\n        },\n\n        assetFilter() {\n            return Filter.getByName('asset');\n        },\n\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        webhookLogColumns() {\n            return [\n                {\n                    property: 'transactionId',\n                    label: this.$tc('sw-order.payone-payment.webhookLog.columnTitleTransactionId')\n                },\n                {\n                    property: 'transactionState',\n                    label: this.$tc('sw-order.payone-payment.webhookLog.columnTitleTransactionState')\n                },\n                {\n                    property: 'sequenceNumber',\n                    label: this.$tc('sw-order.payone-payment.webhookLog.columnTitleSequenceNumber')\n                },\n                {\n                    property: 'clearingType',\n                    label: this.$tc('sw-order.payone-payment.webhookLog.columnTitleClearingType')\n                },\n                {\n                    property: 'webhookDateTime',\n                    label: this.$tc('sw-order.payone-payment.webhookLog.columnTitleWebhookDateTime')\n                },\n            ];\n        },\n\n        keyValueColumns() {\n            return [\n                {property: 'key', label: this.$tc('sw-order.payone-payment.webhookLog.columnTitleKey')},\n                {property: 'value', label: this.$tc('sw-order.payone-payment.webhookLog.columnTitleValue')},\n            ];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getWebhookLogs();\n        },\n\n        reloadWebhookLogs() {\n            this.getWebhookLogs();\n        },\n\n        getWebhookLogs() {\n            const criteria = new Criteria();\n            criteria.addFilter(Criteria.equals('orderId', this.order.id));\n            criteria.addSorting(Criteria.sort('webhookDateTime', 'ASC', true));\n\n            this.isLoading = true;\n            return this.webhookLogRepository.search(criteria, Shopware.Context.api).then((searchResult) => {\n                this.webhookLogs = searchResult;\n                this.isLoading = false;\n            });\n        },\n\n        openDetails(webhookLog) {\n            this.showWebhookDetails = webhookLog.webhookDetails;\n        },\n\n        onCloseWebhookModal() {\n            this.showWebhookDetails = null;\n        },\n\n        toKeyValueSource(object) {\n            const data = [];\n\n            for (const key in object) {\n                data.push({key, value: object[key]});\n            }\n\n            data.sort((a, b) => a.key.localeCompare(b.key));\n\n            return data;\n        },\n\n        downloadAsTxt(object, objectType, id) {\n            const link = document.createElement('a');\n            link.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(JSON.stringify(object, null, 4));\n            link.download = `PAYONE-${objectType}-${id}.txt`;\n            link.dispatchEvent(new MouseEvent('click'));\n            link.remove();\n        },\n    }\n};\n","export default \"{% block payone_payment_webhook_log %}\\n    <sw-card\\n            class=\\\"payone-payment-webhook-log-card\\\"\\n            position-identifier=\\\"payone-payment-webhook-log-card\\\"\\n            :title=\\\"$tc('sw-order.payone-payment.webhookLog.cardTitle')\\\"\\n    >\\n        <sw-data-grid\\n                v-if=\\\"webhookLogs.length > 0\\\"\\n                :showSelection=\\\"false\\\"\\n                :dataSource=\\\"webhookLogs\\\"\\n                :columns=\\\"webhookLogColumns\\\"\\n                :isLoading=\\\"isLoading\\\"\\n        >\\n            <template #column-webhookDateTime=\\\"{ item }\\\">\\n                {{ dateFilter(item.webhookDateTime, { hour: '2-digit', minute: '2-digit' }) }}\\n            </template>\\n\\n            <template #actions=\\\"{ item }\\\">\\n                <sw-context-menu-item @click=\\\"openDetails(item)\\\">\\n                    {{ $tc('sw-order.payone-payment.webhookLog.contextMenu.openWebhookDetails') }}\\n                </sw-context-menu-item>\\n            </template>\\n\\n            <template #action-modals=\\\"{ item }\\\">\\n                <sw-modal\\n                        v-if=\\\"showWebhookDetails\\\"\\n                        :title=\\\"$tc('sw-order.payone-payment.webhookLog.webhookDetailsModal.title')\\\"\\n                        variant=\\\"large\\\"\\n                        @modal-close=\\\"onCloseWebhookModal\\\"\\n                >\\n                    <sw-button variant=\\\"primary\\\" @click=\\\"downloadAsTxt(showWebhookDetails, 'webhook', item.transactionId)\\\">\\n                        {{ $tc('sw-order.payone-payment.webhookLog.webhookDetailsModal.downloadButton') }}\\n                    </sw-button>\\n                    <sw-data-grid\\n                            :showSelection=\\\"false\\\"\\n                            :showActions=\\\"false\\\"\\n                            :dataSource=\\\"toKeyValueSource(showWebhookDetails)\\\"\\n                            :columns=\\\"keyValueColumns\\\"\\n                            :isLoading=\\\"isLoading\\\"\\n                    >\\n                    </sw-data-grid>\\n                </sw-modal>\\n            </template>\\n        </sw-data-grid>\\n\\n        <sw-empty-state\\n                v-else\\n                :absolute=\\\"false\\\"\\n                :title=\\\"$tc('sw-order.payone-payment.webhookLog.emptyState.title')\\\"\\n                :subline=\\\"$tc('sw-order.payone-payment.webhookLog.emptyState.subline')\\\"\\n        >\\n            <template #icon>\\n                <img\\n                        :src=\\\"assetFilter('/administration/static/img/empty-states/order-empty-state.svg')\\\"\\n                        :alt=\\\"$tc('sw-order.payone-payment.webhookLog.emptyState.title')\\\"\\n                >\\n            </template>\\n        </sw-empty-state>\\n    </sw-card>\\n{% endblock %}\\n\";"],"names":["Criteria","Shopware","Data","Filter","template","inject","props","order","type","Object","required","data","webhookLogs","isLoading","showWebhookDetails","computed","webhookLogRepository","repositoryFactory","create","assetFilter","getByName","dateFilter","webhookLogColumns","property","label","$tc","keyValueColumns","created","createdComponent","methods","getWebhookLogs","reloadWebhookLogs","criteria","addFilter","equals","id","addSorting","sort","search","Context","api","then","searchResult","openDetails","webhookLog","webhookDetails","onCloseWebhookModal","toKeyValueSource","object","key","push","value","a","b","localeCompare","downloadAsTxt","objectType","link","document","createElement","href","encodeURIComponent","JSON","stringify","download","dispatchEvent","MouseEvent","remove"],"sourceRoot":""}